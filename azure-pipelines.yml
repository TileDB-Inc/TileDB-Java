# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
  branches:
    include:
      - master
      - release-*
  tags:
    include:
      - "*"

stages:
  - stage: CI
    condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags'))
    jobs:
      - job: Windows
        strategy:
          matrix:
            VS2019:
              imageName: 'windows-2019'
              ORG_GRADLE_PROJECT_TILEDB_SERIALIZATION: "OFF"
              ORG_GRADLE_PROJECT_TILEDB_S3: "OFF"
        pool:
          vmImage: $(imageName)
        steps:
          - task: Gradle@2
            inputs:
              workingDirectory: ''
              gradleWrapperFile: 'gradlew.bat'
              gradleOptions: '-Xmx3072m'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: 'default'
              tasks: 'checkFormat assemble test'
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit, cTest
              testResultsFiles: '**/TEST-*.xml'
            condition: failed()

      - job: Linux_OSX
        strategy:
          matrix:
            ubuntu_latest:
              imageName: 'ubuntu-latest'
              ORG_GRADLE_PROJECT_TILEDB_SERIALIZATION: "OFF"
              ORG_GRADLE_PROJECT_TILEDB_S3: "OFF"
            ubuntu_16:
              imageName: 'ubuntu-16.04'
              ORG_GRADLE_PROJECT_TILEDB_SERIALIZATION: "OFF"
              ORG_GRADLE_PROJECT_TILEDB_S3: "OFF"
            macOS:
              imageName: 'macOS-10.14'
              ORG_GRADLE_PROJECT_TILEDB_SERIALIZATION: "OFF"
              ORG_GRADLE_PROJECT_TILEDB_S3: "OFF"
        pool:
          vmImage: $(imageName)
        steps:
          - template: ci/tiledb-java-linux_osx.yml

  - stage: BuildNativeLibs
    condition: or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/tags'))
    jobs:
      - job: Linux_OSX
        strategy:
          matrix:
            ubuntu_latest:
              imageName: 'ubuntu-latest'
              ORG_GRADLE_PROJECT_TILEDB_S3: "ON"
              ORG_GRADLE_PROJECT_TILEDB_SERIALIZATION: "ON"
            ubuntu_16:
              imageName: 'ubuntu-16.04'
              ORG_GRADLE_PROJECT_TILEDB_SERIALIZATION: "ON"
              ORG_GRADLE_PROJECT_TILEDB_S3: "ON"
            macOS:
              imageName: 'macOS-10.14'
              ORG_GRADLE_PROJECT_TILEDB_S3: "ON"
              ORG_GRADLE_PROJECT_TILEDB_SERIALIZATION: "ON"
        pool:
          vmImage: $(imageName)
        steps:
          - template: ci/tiledb-java-linux_osx-release.yml
      - job: Windows
        strategy:
          matrix:
            windows_19:
              imageName: 'windows-2019'
              ORG_GRADLE_PROJECT_TILEDB_S3: "ON"
              CL: "/arch:AVX2"
        pool:
          vmImage: $(imageName)
        steps:
          - template: ci/tiledb-java-windows-release.yml

  - stage: GitHubRelease
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags')
    jobs:
      - job: All_OS
        strategy:
          matrix:
            ubuntu_latest:
              imageName: 'ubuntu-latest'
              ORG_GRADLE_PROJECT_TILEDB_S3: "ON"
              ORG_GRADLE_PROJECT_TILEDB_SERIALIZATION: "ON"
            ubuntu_16:
              imageName: 'ubuntu-16.04'
              ORG_GRADLE_PROJECT_TILEDB_SERIALIZATION: "ON"
              ORG_GRADLE_PROJECT_TILEDB_S3: "ON"
        pool:
          vmImage: $(imageName)

        steps:
          - download: current
            patterns: '**/*.tar.gz'

          - bash: |
              unset SYSTEM
              set +e

              mv ../libraries/* .

              mkdir -p ./build/install/lib
              mkdir ./build/install/lib64
              mkdir ./build/tiledb_jni/
              mkdir ./build/tiledb_jni/Release
              mkdir ./build/install/bin

              for arch in $(ls | grep .tar.gz)
              do
              tar -xf $arch
              done

              # OSX
              mv libtiledb.dylib ./build/install/lib
              mv libtiledbjni.dylib ./build/tiledb_jni

              # Linux
              cp libtiledb.so ./build/install/lib
              mv libtiledb.so ./build/install/lib64
              mv libtiledbjni.so ./build/tiledb_jni

              # Windows
              mv tbb.dll ./build/install/bin
              mv tiledb.dll ./build/install/bin
              mv tiledbjni.dll ./build/tiledb_jni/Release

              ./gradlew assemble

              mkdir $BUILD_BINARIESDIRECTORY/jars
              cp ./build/libs/*.jar $BUILD_BINARIESDIRECTORY/jars

          - task: GithubRelease@0
            displayName: 'GitHub Release'
            inputs:
              gitHubConnection: github_tiledb
              repositoryName: TileDB-Inc/TileDB-Java
              tag: $(Build.SourceBranchName)
              action: "edit"
              assets: $(Build.BinariesDirectory)/jars/*.jar

  - stage: FinalJar
    condition: or( eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/tags'))
    jobs:
      - job: All_OS
        strategy:
          matrix:
            ubuntu_latest:
              imageName: 'ubuntu-latest'
            ubuntu_16:
              imageName: 'ubuntu-16.04'
        pool:
          vmImage: $(imageName)
        steps:
          - template: ci/tiledb-java-final-jar.yml
