#!/bin/bash

set -xe

cd "$(dirname "$0")"

die() {
  echo "$@" 1>&2; exit 1
}

arg() {
  echo "$1" | sed "s/^${2-[^=]*=}//" | sed "s/:/;/g"
}

usage() {
  echo '
Usage: '"$0"' [<options>]
Options:
Configuration:
    --help             print this message
    --prefix=PREFIX    TileDB installation path prefix

Dependencies:
    Bash
    AwK
    grep
    Swig
    GCC / Clang C++ compiler

Example:
    ./generate_tiledb_jni --prefix=/usr/local
'

    exit 10
}

# parse arguments
prefix_dir=""
while test $# != 0; do
    case "$1" in
    --prefix=*) dir=`arg "$1"`
                prefix_dir="$dir";;
    --help) usage ;;
    *) die "Unknown option: $1" ;;
    esac
    shift
done

if [[ ${prefix_dir} == "" ]]; then
  if [ -z "$TILEDB_HOME" ]; then
    die "--prefix=PREFIX tiledb install path is required, or environment variable TILEDB_HOME"
  else
    prefix_dir=$TILEDB_HOME
  fi
fi

# Test if we can find the installed tiledb include directory
tiledb_include="${prefix_dir}/include/tiledb"
if [ ! -d ${tiledb_include} ]; then
  die "${tiledb_include} not found"
fi

# Test if we can find the installed tiledb header
tiledb_header="${prefix_dir}/include/tiledb/tiledb.h"
tiledb_experimental_header="${prefix_dir}/include/tiledb/tiledb_experimental.h"
if [ ! -f ${tiledb_header} ]; then
  die "${tiledb_header} not found"
fi

# Check clang compiler
if [[ x"${CC}" = x"" ]]; then
    CC=gcc
fi

if [[ x"${CXX}" = x"" ]]; then
    CXX=g++
fi

c_compiler=`which ${CC}`
cxx_compiler=`which ${CXX}`

if [[ ! -x ${c_compiler} ]]; then
    die "cannot find c compiler"
fi

if [[ ! -x ${cxx_compiler} ]]; then
    die "cannot find cplusplus compiler"
fi

if [[ ! -x `which awk` ]]; then
  die "awk command not found in path"
fi

if [[ ! -x `which swig` ]]; then
  die "swig wrapper generator not found in path"
fi

# define the necessary macro constants
# (removed during preprocessor macro expansion)
g++ -dM -I ${prefix_dir}/include -x c++-header -E ${tiledb_header} ${tiledb_experimental_header} | grep "#define TILEDB" > swig/tiledb_generated.h ||
  die "could not write ./swig/tiledb_generated.h tmp file"

## remove system headers
awk '!/#\s*include/ || /tiledb_/ || /tiledb\/api/ {print}' ${tiledb_header} ${tiledb_experimental_header} |
   g++ -E -P -nostdinc++  -I "${prefix_dir}/include/tiledb" -I "${prefix_dir}/include/" -x c++ - >> swig/tiledb_generated.h ||
   die "error generating temp combined swig/tiledb_generated.h header for swig generation"

# if existing libtiledb generated source exists, delete it
cleanup_java() {
  if [[ -d ./src/main/java/io/tiledb/libtiledb ]]; then
    rm -r ./src/main/java/io/tiledb/libtiledb/*  || true
  fi
}

cleanup_java

cleanup_cxx() {
  if [[ -d ./src/main/c/generated ]]; then
    rm -r ./src/main/c/generated/* || true
  fi
}

cleanup_cxx

swig -v -java -c++ -package io.tiledb.libtiledb \
                -I${prefix_dir}/include -I${prefix_dir}/include/tiledb \
                -outdir src/main/java/io/tiledb/libtiledb \
		-o src/main/c/generated/tiledb_wrap.cxx swig/tiledb.i

cleanup_header() {
  echo "noop";
}

case "$?" in
0 )
cleanup_header && echo 'Swig success! src/main/c/generated/tiledb_wrap.cxx';;
1 )
cleanup_header && die 'Swig failure!';;
esac

copy_custom_code() {
  cp ./swig/customCode/* ./src/main/java/io/tiledb/libtiledb/
}

copy_custom_code || die "error copying custom java code to io/tiledb/libtiledb"

exit 0
