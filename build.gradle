plugins {
   id 'java'
   id 'idea'
   id 'maven-publish'
   id 'signing'
   id 'com.github.sherter.google-java-format' version '0.7.1'
   id 'io.codearte.nexus-staging' version '0.12.0'
   id 'com.google.osdetector' version '1.6.0'
}

group 'io.tiledb'
version '0.1.5-SNAPSHOT'

repositories {
    jcenter()
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

nexusStaging {
    username = System.getenv('SONATYPE_USERNAME')
    password = System.getenv('SONATYPE_PASSWORD')
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
    main {
        java {
            srcDir 'src/java'
        }
    }
    test {
        java {
            srcDir 'test/java'
        }
    }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

def String getProjectProperty(String propertyName)
{
    String property = null
    if (hasProperty(propertyName))
    {
        property = this.properties[propertyName]
    }
    return property
}

task cmakeTask(type: Exec) {
    workingDir = buildDir
    executable = 'cmake'
    List<String> buildArgs = new ArrayList<String>()
    buildArgs.add("..")
    String tiledb_git_repo = getProjectProperty('TILEDB_GIT_REPOSITORY')
    String tiledb_git_tag = getProjectProperty('TILEDB_GIT_TAG')
    String tiledb_verbose = getProjectProperty('TILEDB_VERBOSE')
    String tiledb_s3 = getProjectProperty('TILEDB_S3')
    String tiledb_hdfs = getProjectProperty('TILEDB_HDFS')
    if (tiledb_git_repo != null) {
	    buildArgs.add("-DTILEDB_GIT_REPOSITORY=" + tiledb_git_repo)
    }
    if (tiledb_git_tag != null) {
        buildArgs.add("-DTILEDB_GIT_TAG=" + tiledb_git_tag)
    }
    if (tiledb_verbose != null) {
        buildArgs.add("-DTILEDB_VERBOSE=" + tiledb_verbose)
    }
    if (tiledb_s3 != null) {
        buildArgs.add("-DTILEDB_S3=" + tiledb_s3)
    }
    if (tiledb_hdfs != null) {
        buildArgs.add("-DTILEDB_HDFS=" + tiledb_hdfs)
    }
    args buildArgs
}

task makeTask(type: Exec) {
    workingDir = buildDir
    executable = 'make'
    args "-j${Runtime.getRuntime().availableProcessors()}"
}
makeTask.dependsOn(cmakeTask)

task makeInstallTask(type: Exec) {
    workingDir = new File(buildDir, "tiledb_jni")
    executable = 'make'
    args 'install'
}
makeInstallTask.dependsOn(makeTask)

assemble.dependsOn(makeInstallTask)

task generateJNI(type: Exec) {
    workingDir = buildDir
    executable = "../generate_tiledb_jni"
}

test {
    systemProperty "java.library.path", "$buildDir/install/lib/"
    testLogging {
        showStandardStreams = true
    }
}

jar {
    into(new File('lib', osdetector.classifier).toString()) {
        from file("$buildDir/install/lib/${System.mapLibraryName("tiledb")}")
        from file("$buildDir/install/lib/${System.mapLibraryName("tiledbjni")}")
        from file("$buildDir/install/lib64/${System.mapLibraryName("tiledb")}")
        from file("$buildDir/install/lib64/${System.mapLibraryName("tiledbjni")}")
    }
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

import org.gradle.plugins.signing.Sign
gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        allprojects { ext."signing.keyId" = System.getenv('GPG_KEY_ID') }
        allprojects { ext."signing.secretKeyRingFile" = System.getenv('GPG_KEY_LOCATION') }
        allprojects { ext."signing.password" = System.getenv('GPG_PASSPHRASE') }
    }
    // Do not sign archives by default (a local build without gpg keyring should succeed)
    if (taskGraph.allTasks.any { it.name == 'build' || it.name == 'assemble' }) {
        tasks.findAll { it.name == 'signArchives' || it.name == 'signDocsJar' || it.name == 'signTestJar' }.each { task ->
            task.enabled = false
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourceJar
            artifact javadocJar

            pom {
                name = 'TileDB Java'
                description = 'Java bindings for TileDB Library'
                url = 'https://github.com/TileDB-Inc/TileDB-Java'
                licenses {
                    license {
                        name = 'The MIT License (MIT)'
                        url = 'https://github.com/TileDB-Inc/TileDB-Java/blob/master/LICENSE'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/TileDB-Inc/TileDB-Java.git'
                    developerConnection = 'scm:git:ssh://git@github.com/TileDB-Inc/TileDB-Java'
                    url = 'https://github.com/TileDB-Inc/TileDB-Java'
                }
                developers {
                    developer {
                        name = 'Seth Shelnutt'
                        email = 'help@tiledb.io'
                        organization = 'TileDB, Inc.'
                        organizationUrl = 'https://tiledb.io/'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username System.getenv('SONATYPE_USERNAME')
                password System.getenv('SONATYPE_PASSWORD')
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
    sign configurations.archives
}

import com.github.sherter.googlejavaformatgradleplugin.GoogleJavaFormat
import com.github.sherter.googlejavaformatgradleplugin.VerifyGoogleJavaFormat

task format(type: GoogleJavaFormat) {
    source = sourceSets*.allJava
    source 'swig/customCode'
    include '**/*.java'
}

task checkFormat(type: VerifyGoogleJavaFormat) {
    source = sourceSets*.allJava
    source 'swig/customCode'
    include '**/*.java'
    ignoreFailures false
}
