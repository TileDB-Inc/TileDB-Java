plugins {
   id 'java-library'
   id 'idea'
   id 'maven-publish'
   id 'signing'
   id 'com.github.sherter.google-java-format' version '0.8'
   id 'io.codearte.nexus-staging' version '0.30.0'
   id 'com.google.osdetector' version '1.6.0'
}

group 'io.tiledb'
version '0.19.0-SNAPSHOT'

repositories {
    jcenter()
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

nexusStaging {
    username = System.getenv('SONATYPE_USERNAME')
    password = System.getenv('SONATYPE_PASSWORD')
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
    main {
        java {
            srcDir 'src/java'
        }
    }
    test {
        java {
            srcDir 'test/java'
        }
    }
}

dependencies {
    testImplementation 'junit:junit:4.12'
    testImplementation 'commons-io:commons-io:2.8.0'
}

task cmakeTask(type: Exec) {
    File jniLibs = new File(buildDir.path + "/tiledb_jni")
    File tiledbLibs = new File(buildDir.path + "/install/lib")

    onlyIf { !buildDir.exists() || !jniLibs.exists() || !tiledbLibs.exists() }
    doFirst {
        mkdir buildDir
    }

    workingDir = buildDir
    executable = 'cmake'
    def buildArgs = [".."]
    if (project.properties.TILEDB_CMAKE_GENERATOR) {
        buildArgs << "-G" << project.properties.TILEDB_CMAKE_GENERATOR
    }
    if (project.properties.TILEDB_CMAKE_ARCHITECTURE) {
        buildArgs << "-A" << project.properties.TILEDB_CMAKE_ARCHITECTURE
    }
    [
        "TILEDB_GIT_REPOSITORY",
        "TILEDB_GIT_TAG",
        "TILEDB_VERBOSE",
        "TILEDB_S3",
        "TILEDB_AZURE",
        "TILEDB_HDFS",
        "TILEDB_SERIALIZATION",
        "FORCE_BUILD_TILEDB",
        "TILEDB_SKIP_S3AWSSDK_DIR_LENGTH_CHECK",
        "DOWNLOAD_TILEDB_PREBUILT"
    ].each { v ->
        if (project.hasProperty(v)) {
            buildArgs << "-D${v}=${project.property(v)}"
        }
    }
    args buildArgs
}

task cmakeBuildTask(type: Exec) {
    File jniLibs = new File(buildDir.path + "/tiledb_jni")
    File tiledbLibs = new File(buildDir.path + "/install/lib")

    onlyIf { !buildDir.exists() || !jniLibs.exists() || !tiledbLibs.exists() }
    doFirst {
        mkdir buildDir
    }

    workingDir = buildDir
    executable = 'cmake'
    args "--build", ".", "--config", "release"
}
cmakeBuildTask.dependsOn(cmakeTask)

assemble.dependsOn(cmakeBuildTask)

task generateJNI(type: Exec) {
    workingDir = buildDir
    executable = "../generate_tiledb_jni"
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

import org.apache.tools.ant.taskdefs.condition.Os
test {
    useJUnit()

    maxHeapSize = '1G'

    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        systemProperty "java.library.path", "$buildDir\\install\\bin;$buildDir\\tiledb_jni\\Release"
    } else {
        systemProperty "java.library.path", "$buildDir/install/lib:$buildDir/install/lib64:$buildDir/tiledb_jni"
    }

    testLogging {
        showStandardStreams = true
    }
}

jar {
    into(new File('lib').toString()) {
        // Linux and macOS
        from file("$buildDir/install/lib/libtiledb.so")
        from file("$buildDir/install/lib64/libtiledb.so")
        from file("$buildDir/tiledb_jni/libtiledbjni.so")

        from file("$buildDir/install/lib/libtiledb.dylib")
        from file("$buildDir/install/lib64/libtiledb.dylib")
        from file("$buildDir/tiledb_jni/libtiledbjni.dylib")

        // Windows
        from file("$buildDir/install/bin/tbb.dll")
        from file("$buildDir/install/bin/tiledb.dll")
        from file("$buildDir/tiledb_jni/Release/tiledbjni.dll")
    }

    manifest {
        attributes("Implementation-Title": "Gradle",
                "Implementation-Version": archiveVersion)
    }
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

import org.gradle.plugins.signing.Sign
gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        allprojects { ext."signing.keyId" = System.getenv('GPG_KEY_ID') }
        allprojects { ext."signing.secretKeyRingFile" = System.getenv('GPG_KEY_LOCATION') }
        allprojects { ext."signing.password" = System.getenv('GPG_PASSPHRASE') }
    }
    // Do not sign archives by default (a local build without gpg keyring should succeed)
    if (taskGraph.allTasks.any { it.name == 'build' || it.name == 'assemble'  || it.name == 'publishToMavenLocal'}) {
        tasks.findAll { it.name == 'signArchives' || it.name == 'signDocsJar' || it.name == 'signTestJar' || it.name == 'signMavenJavaPublication'}.each { task ->
            task.enabled = false
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourceJar
            artifact javadocJar

            pom {
                name = 'TileDB Java'
                description = 'Java bindings for TileDB Library'
                url = 'https://github.com/TileDB-Inc/TileDB-Java'
                licenses {
                    license {
                        name = 'The MIT License (MIT)'
                        url = 'https://github.com/TileDB-Inc/TileDB-Java/blob/master/LICENSE'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/TileDB-Inc/TileDB-Java.git'
                    developerConnection = 'scm:git:ssh://git@github.com/TileDB-Inc/TileDB-Java'
                    url = 'https://github.com/TileDB-Inc/TileDB-Java'
                }
                developers {
                    developer {
                        name = 'Seth Shelnutt'
                        email = 'help@tiledb.io'
                        organization = 'TileDB, Inc.'
                        organizationUrl = 'https://tiledb.io/'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username System.getenv('SONATYPE_USERNAME')
                password System.getenv('SONATYPE_PASSWORD')
            }
        }
    }
}


signing {
    sign publishing.publications.mavenJava
    sign configurations.archives
}

import com.github.sherter.googlejavaformatgradleplugin.GoogleJavaFormat
import com.github.sherter.googlejavaformatgradleplugin.VerifyGoogleJavaFormat

import java.nio.file.Files

task format(type: GoogleJavaFormat) {
    source = sourceSets*.allJava
    source 'swig/customCode'
    include '**/*.java'
}

task checkFormat(type: VerifyGoogleJavaFormat) {
    source = sourceSets*.allJava
    source 'swig/customCode'
    include '**/*.java'
    ignoreFailures false
}
