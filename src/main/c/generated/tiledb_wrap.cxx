/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <string>
#include <vector>
#include <stdio.h>

#include "tiledb/tiledb.h"
#include "tiledb/tiledb_experimental.h"
#include "tiledb_java_extensions.h"


#include <stdint.h>		// Use the C99 official header


typedef int32_t int32_tArray;

SWIGINTERN int32_tArray *new_int32_tArray(int nelements){
  return new int32_t[nelements]();
}
SWIGINTERN void delete_int32_tArray(int32_tArray *self){
  delete [] self;
}
SWIGINTERN int32_t int32_tArray_getitem(int32_tArray *self,int index){
  return self[index];
}
SWIGINTERN void int32_tArray_setitem(int32_tArray *self,int index,int32_t value){
  self[index] = value;
}
SWIGINTERN int32_t *int32_tArray_cast(int32_tArray *self){
  return self;
}
SWIGINTERN int32_tArray *int32_tArray_frompointer(int32_t *t){
  return (int32_tArray *) t;
}

typedef capi_return_t capi_return_t;

SWIGINTERN capi_return_t *new_capi_return_t(int nelements){
  return new capi_return_t[nelements]();
}
SWIGINTERN void delete_capi_return_t(capi_return_t *self){
  delete [] self;
}
SWIGINTERN capi_return_t capi_return_t_getitem(capi_return_t *self,int index){
  return self[index];
}
SWIGINTERN void capi_return_t_setitem(capi_return_t *self,int index,capi_return_t value){
  self[index] = value;
}
SWIGINTERN capi_return_t *capi_return_t_cast(capi_return_t *self){
  return self;
}
SWIGINTERN capi_return_t *capi_return_t_frompointer(capi_return_t *t){
  return (capi_return_t *) t;
}

typedef int64_t int64_tArray;

SWIGINTERN int64_tArray *new_int64_tArray(int nelements){
  return new int64_t[nelements]();
}
SWIGINTERN void delete_int64_tArray(int64_tArray *self){
  delete [] self;
}
SWIGINTERN int64_t int64_tArray_getitem(int64_tArray *self,int index){
  return self[index];
}
SWIGINTERN void int64_tArray_setitem(int64_tArray *self,int index,int64_t value){
  self[index] = value;
}
SWIGINTERN int64_t *int64_tArray_cast(int64_tArray *self){
  return self;
}
SWIGINTERN int64_tArray *int64_tArray_frompointer(int64_t *t){
  return (int64_tArray *) t;
}

typedef char charArray;

SWIGINTERN charArray *new_charArray(int nelements){
  return new char[nelements]();
}
SWIGINTERN void delete_charArray(charArray *self){
  delete [] self;
}
SWIGINTERN char charArray_getitem(charArray *self,int index){
  return self[index];
}
SWIGINTERN void charArray_setitem(charArray *self,int index,char value){
  self[index] = value;
}
SWIGINTERN char *charArray_cast(charArray *self){
  return self;
}
SWIGINTERN charArray *charArray_frompointer(char *t){
  return (charArray *) t;
}

typedef float floatArray;

SWIGINTERN floatArray *new_floatArray(int nelements){
  return new float[nelements]();
}
SWIGINTERN void delete_floatArray(floatArray *self){
  delete [] self;
}
SWIGINTERN float floatArray_getitem(floatArray *self,int index){
  return self[index];
}
SWIGINTERN void floatArray_setitem(floatArray *self,int index,float value){
  self[index] = value;
}
SWIGINTERN float *floatArray_cast(floatArray *self){
  return self;
}
SWIGINTERN floatArray *floatArray_frompointer(float *t){
  return (floatArray *) t;
}

typedef double doubleArray;

SWIGINTERN doubleArray *new_doubleArray(int nelements){
  return new double[nelements]();
}
SWIGINTERN void delete_doubleArray(doubleArray *self){
  delete [] self;
}
SWIGINTERN double doubleArray_getitem(doubleArray *self,int index){
  return self[index];
}
SWIGINTERN void doubleArray_setitem(doubleArray *self,int index,double value){
  self[index] = value;
}
SWIGINTERN double *doubleArray_cast(doubleArray *self){
  return self;
}
SWIGINTERN doubleArray *doubleArray_frompointer(double *t){
  return (doubleArray *) t;
}

typedef int8_t int8_tArray;

SWIGINTERN int8_tArray *new_int8_tArray(int nelements){
  return new int8_t[nelements]();
}
SWIGINTERN void delete_int8_tArray(int8_tArray *self){
  delete [] self;
}
SWIGINTERN int8_t int8_tArray_getitem(int8_tArray *self,int index){
  return self[index];
}
SWIGINTERN void int8_tArray_setitem(int8_tArray *self,int index,int8_t value){
  self[index] = value;
}
SWIGINTERN int8_t *int8_tArray_cast(int8_tArray *self){
  return self;
}
SWIGINTERN int8_tArray *int8_tArray_frompointer(int8_t *t){
  return (int8_tArray *) t;
}

typedef uint8_t uint8_tArray;

SWIGINTERN uint8_tArray *new_uint8_tArray(int nelements){
  return new uint8_t[nelements]();
}
SWIGINTERN void delete_uint8_tArray(uint8_tArray *self){
  delete [] self;
}
SWIGINTERN uint8_t uint8_tArray_getitem(uint8_tArray *self,int index){
  return self[index];
}
SWIGINTERN void uint8_tArray_setitem(uint8_tArray *self,int index,uint8_t value){
  self[index] = value;
}
SWIGINTERN uint8_t *uint8_tArray_cast(uint8_tArray *self){
  return self;
}
SWIGINTERN uint8_tArray *uint8_tArray_frompointer(uint8_t *t){
  return (uint8_tArray *) t;
}

typedef int16_t int16_tArray;

SWIGINTERN int16_tArray *new_int16_tArray(int nelements){
  return new int16_t[nelements]();
}
SWIGINTERN void delete_int16_tArray(int16_tArray *self){
  delete [] self;
}
SWIGINTERN int16_t int16_tArray_getitem(int16_tArray *self,int index){
  return self[index];
}
SWIGINTERN void int16_tArray_setitem(int16_tArray *self,int index,int16_t value){
  self[index] = value;
}
SWIGINTERN int16_t *int16_tArray_cast(int16_tArray *self){
  return self;
}
SWIGINTERN int16_tArray *int16_tArray_frompointer(int16_t *t){
  return (int16_tArray *) t;
}

typedef uint16_t uint16_tArray;

SWIGINTERN uint16_tArray *new_uint16_tArray(int nelements){
  return new uint16_t[nelements]();
}
SWIGINTERN void delete_uint16_tArray(uint16_tArray *self){
  delete [] self;
}
SWIGINTERN uint16_t uint16_tArray_getitem(uint16_tArray *self,int index){
  return self[index];
}
SWIGINTERN void uint16_tArray_setitem(uint16_tArray *self,int index,uint16_t value){
  self[index] = value;
}
SWIGINTERN uint16_t *uint16_tArray_cast(uint16_tArray *self){
  return self;
}
SWIGINTERN uint16_tArray *uint16_tArray_frompointer(uint16_t *t){
  return (uint16_tArray *) t;
}

typedef uint32_t uint32_tArray;

SWIGINTERN uint32_tArray *new_uint32_tArray(int nelements){
  return new uint32_t[nelements]();
}
SWIGINTERN void delete_uint32_tArray(uint32_tArray *self){
  delete [] self;
}
SWIGINTERN uint32_t uint32_tArray_getitem(uint32_tArray *self,int index){
  return self[index];
}
SWIGINTERN void uint32_tArray_setitem(uint32_tArray *self,int index,uint32_t value){
  self[index] = value;
}
SWIGINTERN uint32_t *uint32_tArray_cast(uint32_tArray *self){
  return self;
}
SWIGINTERN uint32_tArray *uint32_tArray_frompointer(uint32_t *t){
  return (uint32_tArray *) t;
}

typedef uint64_t uint64_tArray;

SWIGINTERN uint64_tArray *new_uint64_tArray(int nelements){
  return new uint64_t[nelements]();
}
SWIGINTERN void delete_uint64_tArray(uint64_tArray *self){
  delete [] self;
}
SWIGINTERN uint64_t uint64_tArray_getitem(uint64_tArray *self,int index){
  return self[index];
}
SWIGINTERN void uint64_tArray_setitem(uint64_tArray *self,int index,uint64_t value){
  self[index] = value;
}
SWIGINTERN uint64_t *uint64_tArray_cast(uint64_tArray *self){
  return self;
}
SWIGINTERN uint64_tArray *uint64_tArray_frompointer(uint64_t *t){
  return (uint64_tArray *) t;
}

static char * *new_charpArray(int nelements) { 
  return new char *[nelements](); 
}

static void delete_charpArray(char * *ary) { 
  delete [] ary; 
}

static char * charpArray_getitem(char * *ary, int index) {
    return ary[index];
}
static void charpArray_setitem(char * *ary, int index, char * value) {
    ary[index] = value;
}


static void * *new_voidpArray(int nelements) { 
  return new void *[nelements](); 
}

static void delete_voidpArray(void * *ary) { 
  delete [] ary; 
}

static void * voidpArray_getitem(void * *ary, int index) {
    return ary[index];
}
static void voidpArray_setitem(void * *ary, int index, void * value) {
    ary[index] = value;
}


static unsigned long long *new_ullArray(int nelements) { 
  return new unsigned long long[nelements](); 
}

static void delete_ullArray(unsigned long long *ary) { 
  delete [] ary; 
}

static unsigned long long ullArray_getitem(unsigned long long *ary, int index) {
    return ary[index];
}
static void ullArray_setitem(unsigned long long *ary, int index, unsigned long long value) {
    ary[index] = value;
}


static int *new_intp() { 
  return new int(); 
}

static int *copy_intp(int value) { 
  return new int(value); 
}

static void delete_intp(int *obj) { 
  if (obj) delete obj; 
}

static void intp_assign(int *obj, int value) {
  *obj = value;
}

static int intp_value(int *obj) {
  return *obj;
}


static size_t *new_sizep() { 
  return new size_t(); 
}

static size_t *copy_sizep(size_t value) { 
  return new size_t(value); 
}

static void delete_sizep(size_t *obj) { 
  if (obj) delete obj; 
}

static void sizep_assign(size_t *obj, size_t value) {
  *obj = value;
}

static size_t sizep_value(size_t *obj) {
  return *obj;
}


static float *new_floatp() { 
  return new float(); 
}

static float *copy_floatp(float value) { 
  return new float(value); 
}

static void delete_floatp(float *obj) { 
  if (obj) delete obj; 
}

static void floatp_assign(float *obj, float value) {
  *obj = value;
}

static float floatp_value(float *obj) {
  return *obj;
}


static void ** *new_voidppp() { 
  return new void **(); 
}

static void ** *copy_voidppp(void ** value) { 
  return new void **(value); 
}

static void delete_voidppp(void ** *obj) { 
  if (obj) delete obj; 
}

static void voidppp_assign(void ** *obj, void ** value) {
  *obj = value;
}

static void ** voidppp_value(void ** *obj) {
  return *obj;
}


static int * *new_intpp() { 
  return new int *(); 
}

static int * *copy_intpp(int * value) { 
  return new int *(value); 
}

static void delete_intpp(int * *obj) { 
  if (obj) delete obj; 
}

static void intpp_assign(int * *obj, int * value) {
  *obj = value;
}

static int * intpp_value(int * *obj) {
  return *obj;
}


static char * *new_charpp() { 
  return new char *(); 
}

static char * *copy_charpp(char * value) { 
  return new char *(value); 
}

static void delete_charpp(char * *obj) { 
  if (obj) delete obj; 
}

static void charpp_assign(char * *obj, char * value) {
  *obj = value;
}

static char * charpp_value(char * *obj) {
  return *obj;
}


static unsigned int *new_uintp() { 
  return new unsigned int(); 
}

static unsigned int *copy_uintp(unsigned int value) { 
  return new unsigned int(value); 
}

static void delete_uintp(unsigned int *obj) { 
  if (obj) delete obj; 
}

static void uintp_assign(unsigned int *obj, unsigned int value) {
  *obj = value;
}

static unsigned int uintp_value(unsigned int *obj) {
  return *obj;
}


static unsigned long long *new_ullp() { 
  return new unsigned long long(); 
}

static unsigned long long *copy_ullp(unsigned long long value) { 
  return new unsigned long long(value); 
}

static void delete_ullp(unsigned long long *obj) { 
  if (obj) delete obj; 
}

static void ullp_assign(unsigned long long *obj, unsigned long long value) {
  *obj = value;
}

static unsigned long long ullp_value(unsigned long long *obj) {
  return *obj;
}


static unsigned long *new_ulp() { 
  return new unsigned long(); 
}

static unsigned long *copy_ulp(unsigned long value) { 
  return new unsigned long(value); 
}

static void delete_ulp(unsigned long *obj) { 
  if (obj) delete obj; 
}

static void ulp_assign(unsigned long *obj, unsigned long value) {
  *obj = value;
}

static unsigned long ulp_value(unsigned long *obj) {
  return *obj;
}


static tiledb_object_t *new_tiledb_object_tp() { 
  return new tiledb_object_t(); 
}

static tiledb_object_t *copy_tiledb_object_tp(tiledb_object_t value) { 
  return new tiledb_object_t(value); 
}

static void delete_tiledb_object_tp(tiledb_object_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_object_tp_assign(tiledb_object_t *obj, tiledb_object_t value) {
  *obj = value;
}

static tiledb_object_t tiledb_object_tp_value(tiledb_object_t *obj) {
  return *obj;
}


static tiledb_query_type_t *new_tiledb_query_type_tp() { 
  return new tiledb_query_type_t(); 
}

static tiledb_query_type_t *copy_tiledb_query_type_tp(tiledb_query_type_t value) { 
  return new tiledb_query_type_t(value); 
}

static void delete_tiledb_query_type_tp(tiledb_query_type_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_query_type_tp_assign(tiledb_query_type_t *obj, tiledb_query_type_t value) {
  *obj = value;
}

static tiledb_query_type_t tiledb_query_type_tp_value(tiledb_query_type_t *obj) {
  return *obj;
}


static tiledb_query_status_t *new_tiledb_query_status_tp() { 
  return new tiledb_query_status_t(); 
}

static tiledb_query_status_t *copy_tiledb_query_status_tp(tiledb_query_status_t value) { 
  return new tiledb_query_status_t(value); 
}

static void delete_tiledb_query_status_tp(tiledb_query_status_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_query_status_tp_assign(tiledb_query_status_t *obj, tiledb_query_status_t value) {
  *obj = value;
}

static tiledb_query_status_t tiledb_query_status_tp_value(tiledb_query_status_t *obj) {
  return *obj;
}


static tiledb_filesystem_t *new_tiledb_filesystem_tp() { 
  return new tiledb_filesystem_t(); 
}

static tiledb_filesystem_t *copy_tiledb_filesystem_tp(tiledb_filesystem_t value) { 
  return new tiledb_filesystem_t(value); 
}

static void delete_tiledb_filesystem_tp(tiledb_filesystem_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_filesystem_tp_assign(tiledb_filesystem_t *obj, tiledb_filesystem_t value) {
  *obj = value;
}

static tiledb_filesystem_t tiledb_filesystem_tp_value(tiledb_filesystem_t *obj) {
  return *obj;
}


static tiledb_datatype_t *new_tiledb_datatype_tp() { 
  return new tiledb_datatype_t(); 
}

static tiledb_datatype_t *copy_tiledb_datatype_tp(tiledb_datatype_t value) { 
  return new tiledb_datatype_t(value); 
}

static void delete_tiledb_datatype_tp(tiledb_datatype_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_datatype_tp_assign(tiledb_datatype_t *obj, tiledb_datatype_t value) {
  *obj = value;
}

static tiledb_datatype_t tiledb_datatype_tp_value(tiledb_datatype_t *obj) {
  return *obj;
}


static tiledb_array_type_t *new_tiledb_array_type_tp() { 
  return new tiledb_array_type_t(); 
}

static tiledb_array_type_t *copy_tiledb_array_type_tp(tiledb_array_type_t value) { 
  return new tiledb_array_type_t(value); 
}

static void delete_tiledb_array_type_tp(tiledb_array_type_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_array_type_tp_assign(tiledb_array_type_t *obj, tiledb_array_type_t value) {
  *obj = value;
}

static tiledb_array_type_t tiledb_array_type_tp_value(tiledb_array_type_t *obj) {
  return *obj;
}


static tiledb_layout_t *new_tiledb_layout_tp() { 
  return new tiledb_layout_t(); 
}

static tiledb_layout_t *copy_tiledb_layout_tp(tiledb_layout_t value) { 
  return new tiledb_layout_t(value); 
}

static void delete_tiledb_layout_tp(tiledb_layout_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_layout_tp_assign(tiledb_layout_t *obj, tiledb_layout_t value) {
  *obj = value;
}

static tiledb_layout_t tiledb_layout_tp_value(tiledb_layout_t *obj) {
  return *obj;
}


static tiledb_filter_type_t *new_tiledb_filter_type_tp() { 
  return new tiledb_filter_type_t(); 
}

static tiledb_filter_type_t *copy_tiledb_filter_type_tp(tiledb_filter_type_t value) { 
  return new tiledb_filter_type_t(value); 
}

static void delete_tiledb_filter_type_tp(tiledb_filter_type_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_filter_type_tp_assign(tiledb_filter_type_t *obj, tiledb_filter_type_t value) {
  *obj = value;
}

static tiledb_filter_type_t tiledb_filter_type_tp_value(tiledb_filter_type_t *obj) {
  return *obj;
}


static tiledb_filter_option_t *new_tiledb_filter_option_tp() { 
  return new tiledb_filter_option_t(); 
}

static tiledb_filter_option_t *copy_tiledb_filter_option_tp(tiledb_filter_option_t value) { 
  return new tiledb_filter_option_t(value); 
}

static void delete_tiledb_filter_option_tp(tiledb_filter_option_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_filter_option_tp_assign(tiledb_filter_option_t *obj, tiledb_filter_option_t value) {
  *obj = value;
}

static tiledb_filter_option_t tiledb_filter_option_tp_value(tiledb_filter_option_t *obj) {
  return *obj;
}


static tiledb_walk_order_t *new_tiledb_walk_order_tp() { 
  return new tiledb_walk_order_t(); 
}

static tiledb_walk_order_t *copy_tiledb_walk_order_tp(tiledb_walk_order_t value) { 
  return new tiledb_walk_order_t(value); 
}

static void delete_tiledb_walk_order_tp(tiledb_walk_order_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_walk_order_tp_assign(tiledb_walk_order_t *obj, tiledb_walk_order_t value) {
  *obj = value;
}

static tiledb_walk_order_t tiledb_walk_order_tp_value(tiledb_walk_order_t *obj) {
  return *obj;
}


static tiledb_vfs_mode_t *new_tiledb_vfs_mode_tp() { 
  return new tiledb_vfs_mode_t(); 
}

static tiledb_vfs_mode_t *copy_tiledb_vfs_mode_tp(tiledb_vfs_mode_t value) { 
  return new tiledb_vfs_mode_t(value); 
}

static void delete_tiledb_vfs_mode_tp(tiledb_vfs_mode_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_vfs_mode_tp_assign(tiledb_vfs_mode_t *obj, tiledb_vfs_mode_t value) {
  *obj = value;
}

static tiledb_vfs_mode_t tiledb_vfs_mode_tp_value(tiledb_vfs_mode_t *obj) {
  return *obj;
}


static tiledb_encryption_type_t *new_tiledb_encryption_type_tp() { 
  return new tiledb_encryption_type_t(); 
}

static tiledb_encryption_type_t *copy_tiledb_encryption_type_tp(tiledb_encryption_type_t value) { 
  return new tiledb_encryption_type_t(value); 
}

static void delete_tiledb_encryption_type_tp(tiledb_encryption_type_t *obj) { 
  if (obj) delete obj; 
}

static void tiledb_encryption_type_tp_assign(tiledb_encryption_type_t *obj, tiledb_encryption_type_t value) {
  *obj = value;
}

static tiledb_encryption_type_t tiledb_encryption_type_tp_value(tiledb_encryption_type_t *obj) {
  return *obj;
}


static capi_status_t *new_capi_status_tp() { 
  return new capi_status_t(); 
}

static capi_status_t *copy_capi_status_tp(capi_status_t value) { 
  return new capi_status_t(value); 
}

static void delete_capi_status_tp(capi_status_t *obj) { 
  if (obj) delete obj; 
}

static void capi_status_tp_assign(capi_status_t *obj, capi_status_t value) {
  *obj = value;
}

static capi_status_t capi_status_tp_value(capi_status_t *obj) {
  return *obj;
}


static tiledb_array_t* *new_tiledb_array_tpp() { 
  return new tiledb_array_t*(); 
}

static tiledb_array_t* *copy_tiledb_array_tpp(tiledb_array_t* value) { 
  return new tiledb_array_t*(value); 
}

static void delete_tiledb_array_tpp(tiledb_array_t* *obj) { 
  if (obj) delete obj; 
}

static void tiledb_array_tpp_assign(tiledb_array_t* *obj, tiledb_array_t* value) {
  *obj = value;
}

static tiledb_array_t* tiledb_array_tpp_value(tiledb_array_t* *obj) {
  return *obj;
}


static tiledb_subarray_t* *new_tiledb_subarray_tpp() { 
  return new tiledb_subarray_t*(); 
}

static tiledb_subarray_t* *copy_tiledb_subarray_tpp(tiledb_subarray_t* value) { 
  return new tiledb_subarray_t*(value); 
}

static void delete_tiledb_subarray_tpp(tiledb_subarray_t* *obj) { 
  if (obj) delete obj; 
}

static void tiledb_subarray_tpp_assign(tiledb_subarray_t* *obj, tiledb_subarray_t* value) {
  *obj = value;
}

static tiledb_subarray_t* tiledb_subarray_tpp_value(tiledb_subarray_t* *obj) {
  return *obj;
}


static tiledb_config_t* *new_tiledb_config_tpp() { 
  return new tiledb_config_t*(); 
}

static tiledb_config_t* *copy_tiledb_config_tpp(tiledb_config_t* value) { 
  return new tiledb_config_t*(value); 
}

static void delete_tiledb_config_tpp(tiledb_config_t* *obj) { 
  if (obj) delete obj; 
}

static void tiledb_config_tpp_assign(tiledb_config_t* *obj, tiledb_config_t* value) {
  *obj = value;
}

static tiledb_config_t* tiledb_config_tpp_value(tiledb_config_t* *obj) {
  return *obj;
}


static tiledb_config_iter_t* *new_tiledb_config_iter_tpp() { 
  return new tiledb_config_iter_t*(); 
}

static tiledb_config_iter_t* *copy_tiledb_config_iter_tpp(tiledb_config_iter_t* value) { 
  return new tiledb_config_iter_t*(value); 
}

static void delete_tiledb_config_iter_tpp(tiledb_config_iter_t* *obj) { 
  if (obj) delete obj; 
}

static void tiledb_config_iter_tpp_assign(tiledb_config_iter_t* *obj, tiledb_config_iter_t* value) {
  *obj = value;
}

static tiledb_config_iter_t* tiledb_config_iter_tpp_value(tiledb_config_iter_t* *obj) {
  return *obj;
}


static tiledb_ctx_t* *new_tiledb_ctx_tpp() { 
  return new tiledb_ctx_t*(); 
}

static tiledb_ctx_t* *copy_tiledb_ctx_tpp(tiledb_ctx_t* value) { 
  return new tiledb_ctx_t*(value); 
}

static void delete_tiledb_ctx_tpp(tiledb_ctx_t* *obj) { 
  if (obj) delete obj; 
}

static void tiledb_ctx_tpp_assign(tiledb_ctx_t* *obj, tiledb_ctx_t* value) {
  *obj = value;
}

static tiledb_ctx_t* tiledb_ctx_tpp_value(tiledb_ctx_t* *obj) {
  return *obj;
}


static tiledb_error_t* *new_tiledb_error_tpp() { 
  return new tiledb_error_t*(); 
}

static tiledb_error_t* *copy_tiledb_error_tpp(tiledb_error_t* value) { 
  return new tiledb_error_t*(value); 
}

static void delete_tiledb_error_tpp(tiledb_error_t* *obj) { 
  if (obj) delete obj; 
}

static void tiledb_error_tpp_assign(tiledb_error_t* *obj, tiledb_error_t* value) {
  *obj = value;
}

static tiledb_error_t* tiledb_error_tpp_value(tiledb_error_t* *obj) {
  return *obj;
}


static tiledb_attribute_t* *new_tiledb_attribute_tpp() { 
  return new tiledb_attribute_t*(); 
}

static tiledb_attribute_t* *copy_tiledb_attribute_tpp(tiledb_attribute_t* value) { 
  return new tiledb_attribute_t*(value); 
}

static void delete_tiledb_attribute_tpp(tiledb_attribute_t* *obj) { 
  if (obj) delete obj; 
}

static void tiledb_attribute_tpp_assign(tiledb_attribute_t* *obj, tiledb_attribute_t* value) {
  *obj = value;
}

static tiledb_attribute_t* tiledb_attribute_tpp_value(tiledb_attribute_t* *obj) {
  return *obj;
}


static tiledb_array_schema_t* *new_tiledb_array_schema_tpp() { 
  return new tiledb_array_schema_t*(); 
}

static tiledb_array_schema_t* *copy_tiledb_array_schema_tpp(tiledb_array_schema_t* value) { 
  return new tiledb_array_schema_t*(value); 
}

static void delete_tiledb_array_schema_tpp(tiledb_array_schema_t* *obj) { 
  if (obj) delete obj; 
}

static void tiledb_array_schema_tpp_assign(tiledb_array_schema_t* *obj, tiledb_array_schema_t* value) {
  *obj = value;
}

static tiledb_array_schema_t* tiledb_array_schema_tpp_value(tiledb_array_schema_t* *obj) {
  return *obj;
}


static tiledb_dimension_t* *new_tiledb_dimension_tpp() { 
  return new tiledb_dimension_t*(); 
}

static tiledb_dimension_t* *copy_tiledb_dimension_tpp(tiledb_dimension_t* value) { 
  return new tiledb_dimension_t*(value); 
}

static void delete_tiledb_dimension_tpp(tiledb_dimension_t* *obj) { 
  if (obj) delete obj; 
}

static void tiledb_dimension_tpp_assign(tiledb_dimension_t* *obj, tiledb_dimension_t* value) {
  *obj = value;
}

static tiledb_dimension_t* tiledb_dimension_tpp_value(tiledb_dimension_t* *obj) {
  return *obj;
}


static tiledb_domain_t* *new_tiledb_domain_tpp() { 
  return new tiledb_domain_t*(); 
}

static tiledb_domain_t* *copy_tiledb_domain_tpp(tiledb_domain_t* value) { 
  return new tiledb_domain_t*(value); 
}

static void delete_tiledb_domain_tpp(tiledb_domain_t* *obj) { 
  if (obj) delete obj; 
}

static void tiledb_domain_tpp_assign(tiledb_domain_t* *obj, tiledb_domain_t* value) {
  *obj = value;
}

static tiledb_domain_t* tiledb_domain_tpp_value(tiledb_domain_t* *obj) {
  return *obj;
}


static tiledb_query_t* *new_tiledb_query_tpp() { 
  return new tiledb_query_t*(); 
}

static tiledb_query_t* *copy_tiledb_query_tpp(tiledb_query_t* value) { 
  return new tiledb_query_t*(value); 
}

static void delete_tiledb_query_tpp(tiledb_query_t* *obj) { 
  if (obj) delete obj; 
}

static void tiledb_query_tpp_assign(tiledb_query_t* *obj, tiledb_query_t* value) {
  *obj = value;
}

static tiledb_query_t* tiledb_query_tpp_value(tiledb_query_t* *obj) {
  return *obj;
}


static tiledb_filter_t* *new_tiledb_filter_tpp() { 
  return new tiledb_filter_t*(); 
}

static tiledb_filter_t* *copy_tiledb_filter_tpp(tiledb_filter_t* value) { 
  return new tiledb_filter_t*(value); 
}

static void delete_tiledb_filter_tpp(tiledb_filter_t* *obj) { 
  if (obj) delete obj; 
}

static void tiledb_filter_tpp_assign(tiledb_filter_t* *obj, tiledb_filter_t* value) {
  *obj = value;
}

static tiledb_filter_t* tiledb_filter_tpp_value(tiledb_filter_t* *obj) {
  return *obj;
}


static tiledb_filter_list_t* *new_tiledb_filter_list_tpp() { 
  return new tiledb_filter_list_t*(); 
}

static tiledb_filter_list_t* *copy_tiledb_filter_list_tpp(tiledb_filter_list_t* value) { 
  return new tiledb_filter_list_t*(value); 
}

static void delete_tiledb_filter_list_tpp(tiledb_filter_list_t* *obj) { 
  if (obj) delete obj; 
}

static void tiledb_filter_list_tpp_assign(tiledb_filter_list_t* *obj, tiledb_filter_list_t* value) {
  *obj = value;
}

static tiledb_filter_list_t* tiledb_filter_list_tpp_value(tiledb_filter_list_t* *obj) {
  return *obj;
}


static tiledb_vfs_t* *new_tiledb_vfs_tpp() { 
  return new tiledb_vfs_t*(); 
}

static tiledb_vfs_t* *copy_tiledb_vfs_tpp(tiledb_vfs_t* value) { 
  return new tiledb_vfs_t*(value); 
}

static void delete_tiledb_vfs_tpp(tiledb_vfs_t* *obj) { 
  if (obj) delete obj; 
}

static void tiledb_vfs_tpp_assign(tiledb_vfs_t* *obj, tiledb_vfs_t* value) {
  *obj = value;
}

static tiledb_vfs_t* tiledb_vfs_tpp_value(tiledb_vfs_t* *obj) {
  return *obj;
}


static tiledb_vfs_fh_t* *new_tiledb_vfs_fh_tpp() { 
  return new tiledb_vfs_fh_t*(); 
}

static tiledb_vfs_fh_t* *copy_tiledb_vfs_fh_tpp(tiledb_vfs_fh_t* value) { 
  return new tiledb_vfs_fh_t*(value); 
}

static void delete_tiledb_vfs_fh_tpp(tiledb_vfs_fh_t* *obj) { 
  if (obj) delete obj; 
}

static void tiledb_vfs_fh_tpp_assign(tiledb_vfs_fh_t* *obj, tiledb_vfs_fh_t* value) {
  *obj = value;
}

static tiledb_vfs_fh_t* tiledb_vfs_fh_tpp_value(tiledb_vfs_fh_t* *obj) {
  return *obj;
}


static tiledb_fragment_info_t* *new_tiledb_fragment_info_tpp() { 
  return new tiledb_fragment_info_t*(); 
}

static tiledb_fragment_info_t* *copy_tiledb_fragment_info_tpp(tiledb_fragment_info_t* value) { 
  return new tiledb_fragment_info_t*(value); 
}

static void delete_tiledb_fragment_info_tpp(tiledb_fragment_info_t* *obj) { 
  if (obj) delete obj; 
}

static void tiledb_fragment_info_tpp_assign(tiledb_fragment_info_t* *obj, tiledb_fragment_info_t* value) {
  *obj = value;
}

static tiledb_fragment_info_t* tiledb_fragment_info_tpp_value(tiledb_fragment_info_t* *obj) {
  return *obj;
}


static tiledb_query_condition_t* *new_tiledb_query_condition_tpp() { 
  return new tiledb_query_condition_t*(); 
}

static tiledb_query_condition_t* *copy_tiledb_query_condition_tpp(tiledb_query_condition_t* value) { 
  return new tiledb_query_condition_t*(value); 
}

static void delete_tiledb_query_condition_tpp(tiledb_query_condition_t* *obj) { 
  if (obj) delete obj; 
}

static void tiledb_query_condition_tpp_assign(tiledb_query_condition_t* *obj, tiledb_query_condition_t* value) {
  *obj = value;
}

static tiledb_query_condition_t* tiledb_query_condition_tpp_value(tiledb_query_condition_t* *obj) {
  return *obj;
}


static tiledb_group_t* *new_tiledb_group_tpp() { 
  return new tiledb_group_t*(); 
}

static tiledb_group_t* *copy_tiledb_group_tpp(tiledb_group_t* value) { 
  return new tiledb_group_t*(value); 
}

static void delete_tiledb_group_tpp(tiledb_group_t* *obj) { 
  if (obj) delete obj; 
}

static void tiledb_group_tpp_assign(tiledb_group_t* *obj, tiledb_group_t* value) {
  *obj = value;
}

static tiledb_group_t* tiledb_group_tpp_value(tiledb_group_t* *obj) {
  return *obj;
}


static capi_return_t* *new_capi_return_tpp() { 
  return new capi_return_t*(); 
}

static capi_return_t* *copy_capi_return_tpp(capi_return_t* value) { 
  return new capi_return_t*(value); 
}

static void delete_capi_return_tpp(capi_return_t* *obj) { 
  if (obj) delete obj; 
}

static void capi_return_tpp_assign(capi_return_t* *obj, capi_return_t* value) {
  *obj = value;
}

static capi_return_t* capi_return_tpp_value(capi_return_t* *obj) {
  return *obj;
}


static tiledb_consolidation_plan_t* *new_tiledb_consolidation_plan_tpp() { 
  return new tiledb_consolidation_plan_t*(); 
}

static tiledb_consolidation_plan_t* *copy_tiledb_consolidation_plan_tpp(tiledb_consolidation_plan_t* value) { 
  return new tiledb_consolidation_plan_t*(value); 
}

static void delete_tiledb_consolidation_plan_tpp(tiledb_consolidation_plan_t* *obj) { 
  if (obj) delete obj; 
}

static void tiledb_consolidation_plan_tpp_assign(tiledb_consolidation_plan_t* *obj, tiledb_consolidation_plan_t* value) {
  *obj = value;
}

static tiledb_consolidation_plan_t* tiledb_consolidation_plan_tpp_value(tiledb_consolidation_plan_t* *obj) {
  return *obj;
}


static tiledb_array_schema_evolution_t* *new_tiledb_array_schema_evolution_tpp() { 
  return new tiledb_array_schema_evolution_t*(); 
}

static tiledb_array_schema_evolution_t* *copy_tiledb_array_schema_evolution_tpp(tiledb_array_schema_evolution_t* value) { 
  return new tiledb_array_schema_evolution_t*(value); 
}

static void delete_tiledb_array_schema_evolution_tpp(tiledb_array_schema_evolution_t* *obj) { 
  if (obj) delete obj; 
}

static void tiledb_array_schema_evolution_tpp_assign(tiledb_array_schema_evolution_t* *obj, tiledb_array_schema_evolution_t* value) {
  *obj = value;
}

static tiledb_array_schema_evolution_t* tiledb_array_schema_evolution_tpp_value(tiledb_array_schema_evolution_t* *obj) {
  return *obj;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1int32_1tArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  int32_tArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int32_tArray *)new_int32_tArray(arg1);
  *(int32_tArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1int32_1tArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int32_tArray *arg1 = (int32_tArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int32_tArray **)&jarg1; 
  delete_int32_tArray(arg1);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_int32_1tArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  int32_tArray *arg1 = (int32_tArray *) 0 ;
  int arg2 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int32_tArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int32_t)int32_tArray_getitem(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_int32_1tArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  int32_tArray *arg1 = (int32_tArray *) 0 ;
  int arg2 ;
  int32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int32_tArray **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int32_t)jarg3; 
  int32_tArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_int32_1tArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  int32_tArray *arg1 = (int32_tArray *) 0 ;
  int32_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int32_tArray **)&jarg1; 
  result = (int32_t *)int32_tArray_cast(arg1);
  *(int32_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_int32_1tArray_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  int32_t *arg1 = (int32_t *) 0 ;
  int32_tArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int32_t **)&jarg1; 
  result = (int32_tArray *)int32_tArray_frompointer(arg1);
  *(int32_tArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1capi_1return_1t(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  capi_return_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (capi_return_t *)new_capi_return_t(arg1);
  *(capi_return_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1capi_1return_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  capi_return_t *arg1 = (capi_return_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(capi_return_t **)&jarg1; 
  delete_capi_return_t(arg1);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_capi_1return_1t_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  capi_return_t *arg1 = (capi_return_t *) 0 ;
  int arg2 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(capi_return_t **)&jarg1; 
  arg2 = (int)jarg2; 
  result = capi_return_t_getitem(arg1,arg2);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_capi_1return_1t_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  capi_return_t *arg1 = (capi_return_t *) 0 ;
  int arg2 ;
  SwigValueWrapper< capi_return_t > arg3 ;
  capi_return_t *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(capi_return_t **)&jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(capi_return_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null capi_return_t");
    return ;
  }
  arg3 = *argp3; 
  capi_return_t_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_capi_1return_1t_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  capi_return_t *arg1 = (capi_return_t *) 0 ;
  capi_return_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(capi_return_t **)&jarg1; 
  result = (capi_return_t *)capi_return_t_cast(arg1);
  *(capi_return_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_capi_1return_1t_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  capi_return_t *arg1 = (capi_return_t *) 0 ;
  capi_return_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(capi_return_t **)&jarg1; 
  result = (capi_return_t *)capi_return_t_frompointer(arg1);
  *(capi_return_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1int64_1tArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  int64_tArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int64_tArray *)new_int64_tArray(arg1);
  *(int64_tArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1int64_1tArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int64_tArray *arg1 = (int64_tArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int64_tArray **)&jarg1; 
  delete_int64_tArray(arg1);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_int64_1tArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  int64_tArray *arg1 = (int64_tArray *) 0 ;
  int arg2 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int64_tArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int64_t)int64_tArray_getitem(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_int64_1tArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  int64_tArray *arg1 = (int64_tArray *) 0 ;
  int arg2 ;
  int64_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int64_tArray **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int64_t)jarg3; 
  int64_tArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_int64_1tArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  int64_tArray *arg1 = (int64_tArray *) 0 ;
  int64_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int64_tArray **)&jarg1; 
  result = (int64_t *)int64_tArray_cast(arg1);
  *(int64_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_int64_1tArray_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  int64_t *arg1 = (int64_t *) 0 ;
  int64_tArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int64_t **)&jarg1; 
  result = (int64_tArray *)int64_tArray_frompointer(arg1);
  *(int64_tArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1charArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  charArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (charArray *)new_charArray(arg1);
  *(charArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1charArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  charArray *arg1 = (charArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(charArray **)&jarg1; 
  delete_charArray(arg1);
}


SWIGEXPORT jchar JNICALL Java_io_tiledb_libtiledb_tiledbJNI_charArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jchar jresult = 0 ;
  charArray *arg1 = (charArray *) 0 ;
  int arg2 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(charArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char)charArray_getitem(arg1,arg2);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_charArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jchar jarg3) {
  charArray *arg1 = (charArray *) 0 ;
  int arg2 ;
  char arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(charArray **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char)jarg3; 
  charArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jstring JNICALL Java_io_tiledb_libtiledb_tiledbJNI_charArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  charArray *arg1 = (charArray *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(charArray **)&jarg1; 
  result = (char *)charArray_cast(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_charArray_1frompointer(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  charArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (charArray *)charArray_frompointer(arg1);
  *(charArray **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1floatArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  floatArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (floatArray *)new_floatArray(arg1);
  *(floatArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1floatArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floatArray *arg1 = (floatArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(floatArray **)&jarg1; 
  delete_floatArray(arg1);
}


SWIGEXPORT jfloat JNICALL Java_io_tiledb_libtiledb_tiledbJNI_floatArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  floatArray *arg1 = (floatArray *) 0 ;
  int arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floatArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (float)floatArray_getitem(arg1,arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_floatArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  floatArray *arg1 = (floatArray *) 0 ;
  int arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floatArray **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  floatArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_floatArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floatArray *arg1 = (floatArray *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floatArray **)&jarg1; 
  result = (float *)floatArray_cast(arg1);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_floatArray_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  float *arg1 = (float *) 0 ;
  floatArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(float **)&jarg1; 
  result = (floatArray *)floatArray_frompointer(arg1);
  *(floatArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1doubleArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  doubleArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (doubleArray *)new_doubleArray(arg1);
  *(doubleArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1doubleArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  doubleArray *arg1 = (doubleArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(doubleArray **)&jarg1; 
  delete_doubleArray(arg1);
}


SWIGEXPORT jdouble JNICALL Java_io_tiledb_libtiledb_tiledbJNI_doubleArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  doubleArray *arg1 = (doubleArray *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(doubleArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)doubleArray_getitem(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_doubleArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  doubleArray *arg1 = (doubleArray *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(doubleArray **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  doubleArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_doubleArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  doubleArray *arg1 = (doubleArray *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(doubleArray **)&jarg1; 
  result = (double *)doubleArray_cast(arg1);
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_doubleArray_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  double *arg1 = (double *) 0 ;
  doubleArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  result = (doubleArray *)doubleArray_frompointer(arg1);
  *(doubleArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1int8_1tArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  int8_tArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int8_tArray *)new_int8_tArray(arg1);
  *(int8_tArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1int8_1tArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int8_tArray *arg1 = (int8_tArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int8_tArray **)&jarg1; 
  delete_int8_tArray(arg1);
}


SWIGEXPORT jbyte JNICALL Java_io_tiledb_libtiledb_tiledbJNI_int8_1tArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jbyte jresult = 0 ;
  int8_tArray *arg1 = (int8_tArray *) 0 ;
  int arg2 ;
  int8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int8_tArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int8_t)int8_tArray_getitem(arg1,arg2);
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_int8_1tArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jbyte jarg3) {
  int8_tArray *arg1 = (int8_tArray *) 0 ;
  int arg2 ;
  int8_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int8_tArray **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int8_t)jarg3; 
  int8_tArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_int8_1tArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  int8_tArray *arg1 = (int8_tArray *) 0 ;
  int8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int8_tArray **)&jarg1; 
  result = (int8_t *)int8_tArray_cast(arg1);
  *(int8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_int8_1tArray_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  int8_t *arg1 = (int8_t *) 0 ;
  int8_tArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int8_t **)&jarg1; 
  result = (int8_tArray *)int8_tArray_frompointer(arg1);
  *(int8_tArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1uint8_1tArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  uint8_tArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (uint8_tArray *)new_uint8_tArray(arg1);
  *(uint8_tArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1uint8_1tArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  uint8_tArray *arg1 = (uint8_tArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_tArray **)&jarg1; 
  delete_uint8_tArray(arg1);
}


SWIGEXPORT jshort JNICALL Java_io_tiledb_libtiledb_tiledbJNI_uint8_1tArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  uint8_tArray *arg1 = (uint8_tArray *) 0 ;
  int arg2 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uint8_tArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (uint8_t)uint8_tArray_getitem(arg1,arg2);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_uint8_1tArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  uint8_tArray *arg1 = (uint8_tArray *) 0 ;
  int arg2 ;
  uint8_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uint8_tArray **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (uint8_t)jarg3; 
  uint8_tArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_uint8_1tArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uint8_tArray *arg1 = (uint8_tArray *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uint8_tArray **)&jarg1; 
  result = (uint8_t *)uint8_tArray_cast(arg1);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_uint8_1tArray_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  uint8_tArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  result = (uint8_tArray *)uint8_tArray_frompointer(arg1);
  *(uint8_tArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1int16_1tArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  int16_tArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int16_tArray *)new_int16_tArray(arg1);
  *(int16_tArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1int16_1tArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int16_tArray *arg1 = (int16_tArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int16_tArray **)&jarg1; 
  delete_int16_tArray(arg1);
}


SWIGEXPORT jshort JNICALL Java_io_tiledb_libtiledb_tiledbJNI_int16_1tArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  int16_tArray *arg1 = (int16_tArray *) 0 ;
  int arg2 ;
  int16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int16_tArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int16_t)int16_tArray_getitem(arg1,arg2);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_int16_1tArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  int16_tArray *arg1 = (int16_tArray *) 0 ;
  int arg2 ;
  int16_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int16_tArray **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int16_t)jarg3; 
  int16_tArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_int16_1tArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  int16_tArray *arg1 = (int16_tArray *) 0 ;
  int16_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int16_tArray **)&jarg1; 
  result = (int16_t *)int16_tArray_cast(arg1);
  *(int16_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_int16_1tArray_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  int16_t *arg1 = (int16_t *) 0 ;
  int16_tArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int16_t **)&jarg1; 
  result = (int16_tArray *)int16_tArray_frompointer(arg1);
  *(int16_tArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1uint16_1tArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  uint16_tArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (uint16_tArray *)new_uint16_tArray(arg1);
  *(uint16_tArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1uint16_1tArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  uint16_tArray *arg1 = (uint16_tArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint16_tArray **)&jarg1; 
  delete_uint16_tArray(arg1);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_uint16_1tArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  uint16_tArray *arg1 = (uint16_tArray *) 0 ;
  int arg2 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uint16_tArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (uint16_t)uint16_tArray_getitem(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_uint16_1tArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  uint16_tArray *arg1 = (uint16_tArray *) 0 ;
  int arg2 ;
  uint16_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uint16_tArray **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (uint16_t)jarg3; 
  uint16_tArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_uint16_1tArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uint16_tArray *arg1 = (uint16_tArray *) 0 ;
  uint16_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uint16_tArray **)&jarg1; 
  result = (uint16_t *)uint16_tArray_cast(arg1);
  *(uint16_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_uint16_1tArray_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  uint16_t *arg1 = (uint16_t *) 0 ;
  uint16_tArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint16_t **)&jarg1; 
  result = (uint16_tArray *)uint16_tArray_frompointer(arg1);
  *(uint16_tArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1uint32_1tArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  uint32_tArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (uint32_tArray *)new_uint32_tArray(arg1);
  *(uint32_tArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1uint32_1tArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  uint32_tArray *arg1 = (uint32_tArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint32_tArray **)&jarg1; 
  delete_uint32_tArray(arg1);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_uint32_1tArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  uint32_tArray *arg1 = (uint32_tArray *) 0 ;
  int arg2 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uint32_tArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (uint32_t)uint32_tArray_getitem(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_uint32_1tArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  uint32_tArray *arg1 = (uint32_tArray *) 0 ;
  int arg2 ;
  uint32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uint32_tArray **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (uint32_t)jarg3; 
  uint32_tArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_uint32_1tArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uint32_tArray *arg1 = (uint32_tArray *) 0 ;
  uint32_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uint32_tArray **)&jarg1; 
  result = (uint32_t *)uint32_tArray_cast(arg1);
  *(uint32_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_uint32_1tArray_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  uint32_t *arg1 = (uint32_t *) 0 ;
  uint32_tArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint32_t **)&jarg1; 
  result = (uint32_tArray *)uint32_tArray_frompointer(arg1);
  *(uint32_tArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1uint64_1tArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  uint64_tArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (uint64_tArray *)new_uint64_tArray(arg1);
  *(uint64_tArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1uint64_1tArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  uint64_tArray *arg1 = (uint64_tArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint64_tArray **)&jarg1; 
  delete_uint64_tArray(arg1);
}


SWIGEXPORT jobject JNICALL Java_io_tiledb_libtiledb_tiledbJNI_uint64_1tArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jobject jresult = 0 ;
  uint64_tArray *arg1 = (uint64_tArray *) 0 ;
  int arg2 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uint64_tArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (uint64_t)uint64_tArray_getitem(arg1,arg2);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_uint64_1tArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jobject jarg3) {
  uint64_tArray *arg1 = (uint64_tArray *) 0 ;
  int arg2 ;
  uint64_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uint64_tArray **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  uint64_tArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_uint64_1tArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  uint64_tArray *arg1 = (uint64_tArray *) 0 ;
  uint64_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(uint64_tArray **)&jarg1; 
  result = (uint64_t *)uint64_tArray_cast(arg1);
  *(uint64_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_uint64_1tArray_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  uint64_t *arg1 = (uint64_t *) 0 ;
  uint64_tArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint64_t **)&jarg1; 
  result = (uint64_tArray *)uint64_tArray_frompointer(arg1);
  *(uint64_tArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1charpArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (char **)new_charpArray(arg1);
  *(char ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1charpArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  char **arg1 = (char **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char ***)&jarg1; 
  delete_charpArray(arg1);
}


SWIGEXPORT jstring JNICALL Java_io_tiledb_libtiledb_tiledbJNI_charpArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  char **arg1 = (char **) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char ***)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)charpArray_getitem(arg1,arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_charpArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jstring jarg3) {
  char **arg1 = (char **) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char ***)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  charpArray_setitem(arg1,arg2,arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1voidpArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  void **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (void **)new_voidpArray(arg1);
  *(void ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1voidpArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  void **arg1 = (void **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void ***)&jarg1; 
  delete_voidpArray(arg1);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_voidpArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  void **arg1 = (void **) 0 ;
  int arg2 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void ***)&jarg1; 
  arg2 = (int)jarg2; 
  result = (void *)voidpArray_getitem(arg1,arg2);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_voidpArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  void **arg1 = (void **) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void ***)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(void **)&jarg3; 
  voidpArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1ullArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  unsigned long long *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (unsigned long long *)new_ullArray(arg1);
  *(unsigned long long **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1ullArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  unsigned long long *arg1 = (unsigned long long *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned long long **)&jarg1; 
  delete_ullArray(arg1);
}


SWIGEXPORT jobject JNICALL Java_io_tiledb_libtiledb_tiledbJNI_ullArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jobject jresult = 0 ;
  unsigned long long *arg1 = (unsigned long long *) 0 ;
  int arg2 ;
  unsigned long long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned long long **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned long long)ullArray_getitem(arg1,arg2);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_ullArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jobject jarg3) {
  unsigned long long *arg1 = (unsigned long long *) 0 ;
  int arg2 ;
  unsigned long long arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned long long **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (unsigned long long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (unsigned long long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  ullArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1intp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int *)new_intp();
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1intp(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int *)copy_intp(arg1);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1intp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int *arg1 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  delete_intp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_intp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  int *arg1 = (int *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  arg2 = (int)jarg2; 
  intp_assign(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_intp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  int *arg1 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  result = (int)intp_value(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1sizep(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (size_t *)new_sizep();
  *(size_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1sizep(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  result = (size_t *)copy_sizep(arg1);
  *(size_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1sizep(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  size_t *arg1 = (size_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(size_t **)&jarg1; 
  delete_sizep(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_sizep_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  size_t *arg1 = (size_t *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(size_t **)&jarg1; 
  arg2 = (size_t)jarg2; 
  sizep_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_sizep_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t *arg1 = (size_t *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(size_t **)&jarg1; 
  result = (size_t)sizep_value(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1floatp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (float *)new_floatp();
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1floatp(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jlong jresult = 0 ;
  float arg1 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  result = (float *)copy_floatp(arg1);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1floatp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  float *arg1 = (float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(float **)&jarg1; 
  delete_floatp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_floatp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
  float *arg1 = (float *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(float **)&jarg1; 
  arg2 = (float)jarg2; 
  floatp_assign(arg1,arg2);
}


SWIGEXPORT jfloat JNICALL Java_io_tiledb_libtiledb_tiledbJNI_floatp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jfloat jresult = 0 ;
  float *arg1 = (float *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(float **)&jarg1; 
  result = (float)floatp_value(arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1voidppp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  void ***result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (void ***)new_voidppp();
  *(void ****)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1voidppp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void **arg1 = (void **) 0 ;
  void ***result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void ***)&jarg1; 
  result = (void ***)copy_voidppp(arg1);
  *(void ****)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1voidppp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  void ***arg1 = (void ***) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void ****)&jarg1; 
  delete_voidppp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_voidppp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  void ***arg1 = (void ***) 0 ;
  void **arg2 = (void **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void ****)&jarg1; 
  arg2 = *(void ***)&jarg2; 
  voidppp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_voidppp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void ***arg1 = (void ***) 0 ;
  void **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void ****)&jarg1; 
  result = (void **)voidppp_value(arg1);
  *(void ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1intpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int **)new_intpp();
  *(int ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1intpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  int *arg1 = (int *) 0 ;
  int **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  result = (int **)copy_intpp(arg1);
  *(int ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1intpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int **arg1 = (int **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int ***)&jarg1; 
  delete_intpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_intpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int ***)&jarg1; 
  arg2 = *(int **)&jarg2; 
  intpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_intpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  int **arg1 = (int **) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int ***)&jarg1; 
  result = (int *)intpp_value(arg1);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1charpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char **)new_charpp();
  *(char ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1charpp(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (char **)copy_charpp(arg1);
  *(char ***)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1charpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  char **arg1 = (char **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char ***)&jarg1; 
  delete_charpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_charpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  char **arg1 = (char **) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char ***)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  charpp_assign(arg1,arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_io_tiledb_libtiledb_tiledbJNI_charpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  char **arg1 = (char **) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char ***)&jarg1; 
  result = (char *)charpp_value(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1uintp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int *)new_uintp();
  *(unsigned int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1uintp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (unsigned int *)copy_uintp(arg1);
  *(unsigned int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1uintp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  unsigned int *arg1 = (unsigned int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned int **)&jarg1; 
  delete_uintp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_uintp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  unsigned int *arg1 = (unsigned int *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned int **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  uintp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_uintp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int *arg1 = (unsigned int *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned int **)&jarg1; 
  result = (unsigned int)uintp_value(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1ullp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned long long *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned long long *)new_ullp();
  *(unsigned long long **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1ullp(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jlong jresult = 0 ;
  unsigned long long arg1 ;
  unsigned long long *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (unsigned long long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (unsigned long long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (unsigned long long *)copy_ullp(arg1);
  *(unsigned long long **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1ullp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  unsigned long long *arg1 = (unsigned long long *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned long long **)&jarg1; 
  delete_ullp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_ullp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2) {
  unsigned long long *arg1 = (unsigned long long *) 0 ;
  unsigned long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned long long **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (unsigned long long)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (unsigned long long)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  ullp_assign(arg1,arg2);
}


SWIGEXPORT jobject JNICALL Java_io_tiledb_libtiledb_tiledbJNI_ullp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jobject jresult = 0 ;
  unsigned long long *arg1 = (unsigned long long *) 0 ;
  unsigned long long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned long long **)&jarg1; 
  result = (unsigned long long)ullp_value(arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1ulp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned long *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned long *)new_ulp();
  *(unsigned long **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1ulp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned long arg1 ;
  unsigned long *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long)jarg1; 
  result = (unsigned long *)copy_ulp(arg1);
  *(unsigned long **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1ulp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  unsigned long *arg1 = (unsigned long *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned long **)&jarg1; 
  delete_ulp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_ulp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  unsigned long *arg1 = (unsigned long *) 0 ;
  unsigned long arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned long **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  ulp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_ulp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned long *arg1 = (unsigned long *) 0 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned long **)&jarg1; 
  result = (unsigned long)ulp_value(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1tiledb_1object_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_object_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_object_t *)new_tiledb_object_tp();
  *(tiledb_object_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1tiledb_1object_1tp(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  tiledb_object_t arg1 ;
  tiledb_object_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_object_t)jarg1; 
  result = (tiledb_object_t *)copy_tiledb_object_tp(arg1);
  *(tiledb_object_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1tiledb_1object_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_object_t *arg1 = (tiledb_object_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_object_t **)&jarg1; 
  delete_tiledb_object_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1object_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  tiledb_object_t *arg1 = (tiledb_object_t *) 0 ;
  tiledb_object_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_object_t **)&jarg1; 
  arg2 = (tiledb_object_t)jarg2; 
  tiledb_object_tp_assign(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1object_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  tiledb_object_t *arg1 = (tiledb_object_t *) 0 ;
  tiledb_object_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_object_t **)&jarg1; 
  result = (tiledb_object_t)tiledb_object_tp_value(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1tiledb_1query_1type_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_query_type_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_query_type_t *)new_tiledb_query_type_tp();
  *(tiledb_query_type_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1tiledb_1query_1type_1tp(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  tiledb_query_type_t arg1 ;
  tiledb_query_type_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_query_type_t)jarg1; 
  result = (tiledb_query_type_t *)copy_tiledb_query_type_tp(arg1);
  *(tiledb_query_type_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1tiledb_1query_1type_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_query_type_t *arg1 = (tiledb_query_type_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_query_type_t **)&jarg1; 
  delete_tiledb_query_type_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1type_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  tiledb_query_type_t *arg1 = (tiledb_query_type_t *) 0 ;
  tiledb_query_type_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_query_type_t **)&jarg1; 
  arg2 = (tiledb_query_type_t)jarg2; 
  tiledb_query_type_tp_assign(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1type_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  tiledb_query_type_t *arg1 = (tiledb_query_type_t *) 0 ;
  tiledb_query_type_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_query_type_t **)&jarg1; 
  result = (tiledb_query_type_t)tiledb_query_type_tp_value(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1tiledb_1query_1status_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_query_status_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_query_status_t *)new_tiledb_query_status_tp();
  *(tiledb_query_status_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1tiledb_1query_1status_1tp(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  tiledb_query_status_t arg1 ;
  tiledb_query_status_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_query_status_t)jarg1; 
  result = (tiledb_query_status_t *)copy_tiledb_query_status_tp(arg1);
  *(tiledb_query_status_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1tiledb_1query_1status_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_query_status_t *arg1 = (tiledb_query_status_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_query_status_t **)&jarg1; 
  delete_tiledb_query_status_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1status_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  tiledb_query_status_t *arg1 = (tiledb_query_status_t *) 0 ;
  tiledb_query_status_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_query_status_t **)&jarg1; 
  arg2 = (tiledb_query_status_t)jarg2; 
  tiledb_query_status_tp_assign(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1status_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  tiledb_query_status_t *arg1 = (tiledb_query_status_t *) 0 ;
  tiledb_query_status_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_query_status_t **)&jarg1; 
  result = (tiledb_query_status_t)tiledb_query_status_tp_value(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1tiledb_1filesystem_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_filesystem_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_filesystem_t *)new_tiledb_filesystem_tp();
  *(tiledb_filesystem_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1tiledb_1filesystem_1tp(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  tiledb_filesystem_t arg1 ;
  tiledb_filesystem_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_filesystem_t)jarg1; 
  result = (tiledb_filesystem_t *)copy_tiledb_filesystem_tp(arg1);
  *(tiledb_filesystem_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1tiledb_1filesystem_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_filesystem_t *arg1 = (tiledb_filesystem_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_filesystem_t **)&jarg1; 
  delete_tiledb_filesystem_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1filesystem_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  tiledb_filesystem_t *arg1 = (tiledb_filesystem_t *) 0 ;
  tiledb_filesystem_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_filesystem_t **)&jarg1; 
  arg2 = (tiledb_filesystem_t)jarg2; 
  tiledb_filesystem_tp_assign(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1filesystem_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  tiledb_filesystem_t *arg1 = (tiledb_filesystem_t *) 0 ;
  tiledb_filesystem_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_filesystem_t **)&jarg1; 
  result = (tiledb_filesystem_t)tiledb_filesystem_tp_value(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1tiledb_1datatype_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_datatype_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_datatype_t *)new_tiledb_datatype_tp();
  *(tiledb_datatype_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1tiledb_1datatype_1tp(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  tiledb_datatype_t arg1 ;
  tiledb_datatype_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_datatype_t)jarg1; 
  result = (tiledb_datatype_t *)copy_tiledb_datatype_tp(arg1);
  *(tiledb_datatype_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1tiledb_1datatype_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_datatype_t *arg1 = (tiledb_datatype_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_datatype_t **)&jarg1; 
  delete_tiledb_datatype_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1datatype_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  tiledb_datatype_t *arg1 = (tiledb_datatype_t *) 0 ;
  tiledb_datatype_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_datatype_t **)&jarg1; 
  arg2 = (tiledb_datatype_t)jarg2; 
  tiledb_datatype_tp_assign(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1datatype_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  tiledb_datatype_t *arg1 = (tiledb_datatype_t *) 0 ;
  tiledb_datatype_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_datatype_t **)&jarg1; 
  result = (tiledb_datatype_t)tiledb_datatype_tp_value(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1tiledb_1array_1type_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_array_type_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_array_type_t *)new_tiledb_array_type_tp();
  *(tiledb_array_type_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1tiledb_1array_1type_1tp(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  tiledb_array_type_t arg1 ;
  tiledb_array_type_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_array_type_t)jarg1; 
  result = (tiledb_array_type_t *)copy_tiledb_array_type_tp(arg1);
  *(tiledb_array_type_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1tiledb_1array_1type_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_array_type_t *arg1 = (tiledb_array_type_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_array_type_t **)&jarg1; 
  delete_tiledb_array_type_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1type_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  tiledb_array_type_t *arg1 = (tiledb_array_type_t *) 0 ;
  tiledb_array_type_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_array_type_t **)&jarg1; 
  arg2 = (tiledb_array_type_t)jarg2; 
  tiledb_array_type_tp_assign(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1type_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  tiledb_array_type_t *arg1 = (tiledb_array_type_t *) 0 ;
  tiledb_array_type_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_array_type_t **)&jarg1; 
  result = (tiledb_array_type_t)tiledb_array_type_tp_value(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1tiledb_1layout_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_layout_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_layout_t *)new_tiledb_layout_tp();
  *(tiledb_layout_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1tiledb_1layout_1tp(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  tiledb_layout_t arg1 ;
  tiledb_layout_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_layout_t)jarg1; 
  result = (tiledb_layout_t *)copy_tiledb_layout_tp(arg1);
  *(tiledb_layout_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1tiledb_1layout_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_layout_t *arg1 = (tiledb_layout_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_layout_t **)&jarg1; 
  delete_tiledb_layout_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1layout_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  tiledb_layout_t *arg1 = (tiledb_layout_t *) 0 ;
  tiledb_layout_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_layout_t **)&jarg1; 
  arg2 = (tiledb_layout_t)jarg2; 
  tiledb_layout_tp_assign(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1layout_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  tiledb_layout_t *arg1 = (tiledb_layout_t *) 0 ;
  tiledb_layout_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_layout_t **)&jarg1; 
  result = (tiledb_layout_t)tiledb_layout_tp_value(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1tiledb_1filter_1type_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_filter_type_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_filter_type_t *)new_tiledb_filter_type_tp();
  *(tiledb_filter_type_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1tiledb_1filter_1type_1tp(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  tiledb_filter_type_t arg1 ;
  tiledb_filter_type_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_filter_type_t)jarg1; 
  result = (tiledb_filter_type_t *)copy_tiledb_filter_type_tp(arg1);
  *(tiledb_filter_type_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1tiledb_1filter_1type_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_filter_type_t *arg1 = (tiledb_filter_type_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_filter_type_t **)&jarg1; 
  delete_tiledb_filter_type_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1filter_1type_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  tiledb_filter_type_t *arg1 = (tiledb_filter_type_t *) 0 ;
  tiledb_filter_type_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_filter_type_t **)&jarg1; 
  arg2 = (tiledb_filter_type_t)jarg2; 
  tiledb_filter_type_tp_assign(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1filter_1type_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  tiledb_filter_type_t *arg1 = (tiledb_filter_type_t *) 0 ;
  tiledb_filter_type_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_filter_type_t **)&jarg1; 
  result = (tiledb_filter_type_t)tiledb_filter_type_tp_value(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1tiledb_1filter_1option_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_filter_option_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_filter_option_t *)new_tiledb_filter_option_tp();
  *(tiledb_filter_option_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1tiledb_1filter_1option_1tp(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  tiledb_filter_option_t arg1 ;
  tiledb_filter_option_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_filter_option_t)jarg1; 
  result = (tiledb_filter_option_t *)copy_tiledb_filter_option_tp(arg1);
  *(tiledb_filter_option_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1tiledb_1filter_1option_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_filter_option_t *arg1 = (tiledb_filter_option_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_filter_option_t **)&jarg1; 
  delete_tiledb_filter_option_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1filter_1option_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  tiledb_filter_option_t *arg1 = (tiledb_filter_option_t *) 0 ;
  tiledb_filter_option_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_filter_option_t **)&jarg1; 
  arg2 = (tiledb_filter_option_t)jarg2; 
  tiledb_filter_option_tp_assign(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1filter_1option_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  tiledb_filter_option_t *arg1 = (tiledb_filter_option_t *) 0 ;
  tiledb_filter_option_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_filter_option_t **)&jarg1; 
  result = (tiledb_filter_option_t)tiledb_filter_option_tp_value(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1tiledb_1walk_1order_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_walk_order_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_walk_order_t *)new_tiledb_walk_order_tp();
  *(tiledb_walk_order_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1tiledb_1walk_1order_1tp(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  tiledb_walk_order_t arg1 ;
  tiledb_walk_order_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_walk_order_t)jarg1; 
  result = (tiledb_walk_order_t *)copy_tiledb_walk_order_tp(arg1);
  *(tiledb_walk_order_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1tiledb_1walk_1order_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_walk_order_t *arg1 = (tiledb_walk_order_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_walk_order_t **)&jarg1; 
  delete_tiledb_walk_order_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1walk_1order_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  tiledb_walk_order_t *arg1 = (tiledb_walk_order_t *) 0 ;
  tiledb_walk_order_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_walk_order_t **)&jarg1; 
  arg2 = (tiledb_walk_order_t)jarg2; 
  tiledb_walk_order_tp_assign(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1walk_1order_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  tiledb_walk_order_t *arg1 = (tiledb_walk_order_t *) 0 ;
  tiledb_walk_order_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_walk_order_t **)&jarg1; 
  result = (tiledb_walk_order_t)tiledb_walk_order_tp_value(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1tiledb_1vfs_1mode_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_vfs_mode_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_vfs_mode_t *)new_tiledb_vfs_mode_tp();
  *(tiledb_vfs_mode_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1tiledb_1vfs_1mode_1tp(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  tiledb_vfs_mode_t arg1 ;
  tiledb_vfs_mode_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_vfs_mode_t)jarg1; 
  result = (tiledb_vfs_mode_t *)copy_tiledb_vfs_mode_tp(arg1);
  *(tiledb_vfs_mode_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1tiledb_1vfs_1mode_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_vfs_mode_t *arg1 = (tiledb_vfs_mode_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_vfs_mode_t **)&jarg1; 
  delete_tiledb_vfs_mode_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1mode_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  tiledb_vfs_mode_t *arg1 = (tiledb_vfs_mode_t *) 0 ;
  tiledb_vfs_mode_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_vfs_mode_t **)&jarg1; 
  arg2 = (tiledb_vfs_mode_t)jarg2; 
  tiledb_vfs_mode_tp_assign(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1mode_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  tiledb_vfs_mode_t *arg1 = (tiledb_vfs_mode_t *) 0 ;
  tiledb_vfs_mode_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_vfs_mode_t **)&jarg1; 
  result = (tiledb_vfs_mode_t)tiledb_vfs_mode_tp_value(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1tiledb_1encryption_1type_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_encryption_type_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_encryption_type_t *)new_tiledb_encryption_type_tp();
  *(tiledb_encryption_type_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1tiledb_1encryption_1type_1tp(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  tiledb_encryption_type_t arg1 ;
  tiledb_encryption_type_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_encryption_type_t)jarg1; 
  result = (tiledb_encryption_type_t *)copy_tiledb_encryption_type_tp(arg1);
  *(tiledb_encryption_type_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1tiledb_1encryption_1type_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_encryption_type_t *arg1 = (tiledb_encryption_type_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_encryption_type_t **)&jarg1; 
  delete_tiledb_encryption_type_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1encryption_1type_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  tiledb_encryption_type_t *arg1 = (tiledb_encryption_type_t *) 0 ;
  tiledb_encryption_type_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_encryption_type_t **)&jarg1; 
  arg2 = (tiledb_encryption_type_t)jarg2; 
  tiledb_encryption_type_tp_assign(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1encryption_1type_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  tiledb_encryption_type_t *arg1 = (tiledb_encryption_type_t *) 0 ;
  tiledb_encryption_type_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_encryption_type_t **)&jarg1; 
  result = (tiledb_encryption_type_t)tiledb_encryption_type_tp_value(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1capi_1status_1tp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  capi_status_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (capi_status_t *)new_capi_status_tp();
  *(capi_status_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1capi_1status_1tp(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  capi_status_t arg1 ;
  capi_status_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (capi_status_t)jarg1; 
  result = (capi_status_t *)copy_capi_status_tp(arg1);
  *(capi_status_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1capi_1status_1tp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  capi_status_t *arg1 = (capi_status_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(capi_status_t **)&jarg1; 
  delete_capi_status_tp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_capi_1status_1tp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  capi_status_t *arg1 = (capi_status_t *) 0 ;
  capi_status_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(capi_status_t **)&jarg1; 
  arg2 = (capi_status_t)jarg2; 
  capi_status_tp_assign(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_capi_1status_1tp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  capi_status_t *arg1 = (capi_status_t *) 0 ;
  capi_status_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(capi_status_t **)&jarg1; 
  result = (capi_status_t)capi_status_tp_value(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1tiledb_1array_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_array_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_array_t **)new_tiledb_array_tpp();
  *(tiledb_array_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1tiledb_1array_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_array_t *arg1 = (tiledb_array_t *) 0 ;
  tiledb_array_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_array_t **)&jarg1; 
  result = (tiledb_array_t **)copy_tiledb_array_tpp(arg1);
  *(tiledb_array_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1tiledb_1array_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_array_t **arg1 = (tiledb_array_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_array_t ***)&jarg1; 
  delete_tiledb_array_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  tiledb_array_t **arg1 = (tiledb_array_t **) 0 ;
  tiledb_array_t *arg2 = (tiledb_array_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_array_t ***)&jarg1; 
  arg2 = *(tiledb_array_t **)&jarg2; 
  tiledb_array_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_array_t **arg1 = (tiledb_array_t **) 0 ;
  tiledb_array_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_array_t ***)&jarg1; 
  result = (tiledb_array_t *)tiledb_array_tpp_value(arg1);
  *(tiledb_array_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1tiledb_1subarray_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_subarray_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_subarray_t **)new_tiledb_subarray_tpp();
  *(tiledb_subarray_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1tiledb_1subarray_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_subarray_t *arg1 = (tiledb_subarray_t *) 0 ;
  tiledb_subarray_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_subarray_t **)&jarg1; 
  result = (tiledb_subarray_t **)copy_tiledb_subarray_tpp(arg1);
  *(tiledb_subarray_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1tiledb_1subarray_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_subarray_t **arg1 = (tiledb_subarray_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_subarray_t ***)&jarg1; 
  delete_tiledb_subarray_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1subarray_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  tiledb_subarray_t **arg1 = (tiledb_subarray_t **) 0 ;
  tiledb_subarray_t *arg2 = (tiledb_subarray_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_subarray_t ***)&jarg1; 
  arg2 = *(tiledb_subarray_t **)&jarg2; 
  tiledb_subarray_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1subarray_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_subarray_t **arg1 = (tiledb_subarray_t **) 0 ;
  tiledb_subarray_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_subarray_t ***)&jarg1; 
  result = (tiledb_subarray_t *)tiledb_subarray_tpp_value(arg1);
  *(tiledb_subarray_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1tiledb_1config_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_config_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_config_t **)new_tiledb_config_tpp();
  *(tiledb_config_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1tiledb_1config_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_config_t *arg1 = (tiledb_config_t *) 0 ;
  tiledb_config_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_config_t **)&jarg1; 
  result = (tiledb_config_t **)copy_tiledb_config_tpp(arg1);
  *(tiledb_config_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1tiledb_1config_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_config_t **arg1 = (tiledb_config_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_config_t ***)&jarg1; 
  delete_tiledb_config_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1config_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  tiledb_config_t **arg1 = (tiledb_config_t **) 0 ;
  tiledb_config_t *arg2 = (tiledb_config_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_config_t ***)&jarg1; 
  arg2 = *(tiledb_config_t **)&jarg2; 
  tiledb_config_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1config_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_config_t **arg1 = (tiledb_config_t **) 0 ;
  tiledb_config_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_config_t ***)&jarg1; 
  result = (tiledb_config_t *)tiledb_config_tpp_value(arg1);
  *(tiledb_config_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1tiledb_1config_1iter_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_config_iter_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_config_iter_t **)new_tiledb_config_iter_tpp();
  *(tiledb_config_iter_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1tiledb_1config_1iter_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_config_iter_t *arg1 = (tiledb_config_iter_t *) 0 ;
  tiledb_config_iter_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_config_iter_t **)&jarg1; 
  result = (tiledb_config_iter_t **)copy_tiledb_config_iter_tpp(arg1);
  *(tiledb_config_iter_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1tiledb_1config_1iter_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_config_iter_t **arg1 = (tiledb_config_iter_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_config_iter_t ***)&jarg1; 
  delete_tiledb_config_iter_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1config_1iter_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  tiledb_config_iter_t **arg1 = (tiledb_config_iter_t **) 0 ;
  tiledb_config_iter_t *arg2 = (tiledb_config_iter_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_config_iter_t ***)&jarg1; 
  arg2 = *(tiledb_config_iter_t **)&jarg2; 
  tiledb_config_iter_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1config_1iter_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_config_iter_t **arg1 = (tiledb_config_iter_t **) 0 ;
  tiledb_config_iter_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_config_iter_t ***)&jarg1; 
  result = (tiledb_config_iter_t *)tiledb_config_iter_tpp_value(arg1);
  *(tiledb_config_iter_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1tiledb_1ctx_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_ctx_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_ctx_t **)new_tiledb_ctx_tpp();
  *(tiledb_ctx_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1tiledb_1ctx_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_ctx_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  result = (tiledb_ctx_t **)copy_tiledb_ctx_tpp(arg1);
  *(tiledb_ctx_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1tiledb_1ctx_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_ctx_t **arg1 = (tiledb_ctx_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t ***)&jarg1; 
  delete_tiledb_ctx_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1ctx_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  tiledb_ctx_t **arg1 = (tiledb_ctx_t **) 0 ;
  tiledb_ctx_t *arg2 = (tiledb_ctx_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t ***)&jarg1; 
  arg2 = *(tiledb_ctx_t **)&jarg2; 
  tiledb_ctx_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1ctx_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_ctx_t **arg1 = (tiledb_ctx_t **) 0 ;
  tiledb_ctx_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t ***)&jarg1; 
  result = (tiledb_ctx_t *)tiledb_ctx_tpp_value(arg1);
  *(tiledb_ctx_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1tiledb_1error_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_error_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_error_t **)new_tiledb_error_tpp();
  *(tiledb_error_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1tiledb_1error_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_error_t *arg1 = (tiledb_error_t *) 0 ;
  tiledb_error_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_error_t **)&jarg1; 
  result = (tiledb_error_t **)copy_tiledb_error_tpp(arg1);
  *(tiledb_error_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1tiledb_1error_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_error_t **arg1 = (tiledb_error_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_error_t ***)&jarg1; 
  delete_tiledb_error_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1error_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  tiledb_error_t **arg1 = (tiledb_error_t **) 0 ;
  tiledb_error_t *arg2 = (tiledb_error_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_error_t ***)&jarg1; 
  arg2 = *(tiledb_error_t **)&jarg2; 
  tiledb_error_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1error_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_error_t **arg1 = (tiledb_error_t **) 0 ;
  tiledb_error_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_error_t ***)&jarg1; 
  result = (tiledb_error_t *)tiledb_error_tpp_value(arg1);
  *(tiledb_error_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1tiledb_1attribute_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_attribute_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_attribute_t **)new_tiledb_attribute_tpp();
  *(tiledb_attribute_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1tiledb_1attribute_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_attribute_t *arg1 = (tiledb_attribute_t *) 0 ;
  tiledb_attribute_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_attribute_t **)&jarg1; 
  result = (tiledb_attribute_t **)copy_tiledb_attribute_tpp(arg1);
  *(tiledb_attribute_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1tiledb_1attribute_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_attribute_t **arg1 = (tiledb_attribute_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_attribute_t ***)&jarg1; 
  delete_tiledb_attribute_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1attribute_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  tiledb_attribute_t **arg1 = (tiledb_attribute_t **) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_attribute_t ***)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  tiledb_attribute_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1attribute_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_attribute_t **arg1 = (tiledb_attribute_t **) 0 ;
  tiledb_attribute_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_attribute_t ***)&jarg1; 
  result = (tiledb_attribute_t *)tiledb_attribute_tpp_value(arg1);
  *(tiledb_attribute_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1tiledb_1array_1schema_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_array_schema_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_array_schema_t **)new_tiledb_array_schema_tpp();
  *(tiledb_array_schema_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1tiledb_1array_1schema_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_array_schema_t *arg1 = (tiledb_array_schema_t *) 0 ;
  tiledb_array_schema_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_array_schema_t **)&jarg1; 
  result = (tiledb_array_schema_t **)copy_tiledb_array_schema_tpp(arg1);
  *(tiledb_array_schema_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1tiledb_1array_1schema_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_array_schema_t **arg1 = (tiledb_array_schema_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_array_schema_t ***)&jarg1; 
  delete_tiledb_array_schema_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  tiledb_array_schema_t **arg1 = (tiledb_array_schema_t **) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_array_schema_t ***)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  tiledb_array_schema_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_array_schema_t **arg1 = (tiledb_array_schema_t **) 0 ;
  tiledb_array_schema_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_array_schema_t ***)&jarg1; 
  result = (tiledb_array_schema_t *)tiledb_array_schema_tpp_value(arg1);
  *(tiledb_array_schema_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1tiledb_1dimension_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_dimension_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_dimension_t **)new_tiledb_dimension_tpp();
  *(tiledb_dimension_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1tiledb_1dimension_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_dimension_t *arg1 = (tiledb_dimension_t *) 0 ;
  tiledb_dimension_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_dimension_t **)&jarg1; 
  result = (tiledb_dimension_t **)copy_tiledb_dimension_tpp(arg1);
  *(tiledb_dimension_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1tiledb_1dimension_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_dimension_t **arg1 = (tiledb_dimension_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_dimension_t ***)&jarg1; 
  delete_tiledb_dimension_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1dimension_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  tiledb_dimension_t **arg1 = (tiledb_dimension_t **) 0 ;
  tiledb_dimension_t *arg2 = (tiledb_dimension_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_dimension_t ***)&jarg1; 
  arg2 = *(tiledb_dimension_t **)&jarg2; 
  tiledb_dimension_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1dimension_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_dimension_t **arg1 = (tiledb_dimension_t **) 0 ;
  tiledb_dimension_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_dimension_t ***)&jarg1; 
  result = (tiledb_dimension_t *)tiledb_dimension_tpp_value(arg1);
  *(tiledb_dimension_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1tiledb_1domain_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_domain_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_domain_t **)new_tiledb_domain_tpp();
  *(tiledb_domain_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1tiledb_1domain_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_domain_t *arg1 = (tiledb_domain_t *) 0 ;
  tiledb_domain_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_domain_t **)&jarg1; 
  result = (tiledb_domain_t **)copy_tiledb_domain_tpp(arg1);
  *(tiledb_domain_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1tiledb_1domain_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_domain_t **arg1 = (tiledb_domain_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_domain_t ***)&jarg1; 
  delete_tiledb_domain_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1domain_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  tiledb_domain_t **arg1 = (tiledb_domain_t **) 0 ;
  tiledb_domain_t *arg2 = (tiledb_domain_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_domain_t ***)&jarg1; 
  arg2 = *(tiledb_domain_t **)&jarg2; 
  tiledb_domain_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1domain_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_domain_t **arg1 = (tiledb_domain_t **) 0 ;
  tiledb_domain_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_domain_t ***)&jarg1; 
  result = (tiledb_domain_t *)tiledb_domain_tpp_value(arg1);
  *(tiledb_domain_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1tiledb_1query_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_query_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_query_t **)new_tiledb_query_tpp();
  *(tiledb_query_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1tiledb_1query_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_query_t *arg1 = (tiledb_query_t *) 0 ;
  tiledb_query_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_query_t **)&jarg1; 
  result = (tiledb_query_t **)copy_tiledb_query_tpp(arg1);
  *(tiledb_query_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1tiledb_1query_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_query_t **arg1 = (tiledb_query_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_query_t ***)&jarg1; 
  delete_tiledb_query_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  tiledb_query_t **arg1 = (tiledb_query_t **) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_query_t ***)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  tiledb_query_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_query_t **arg1 = (tiledb_query_t **) 0 ;
  tiledb_query_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_query_t ***)&jarg1; 
  result = (tiledb_query_t *)tiledb_query_tpp_value(arg1);
  *(tiledb_query_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1tiledb_1filter_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_filter_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_filter_t **)new_tiledb_filter_tpp();
  *(tiledb_filter_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1tiledb_1filter_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_filter_t *arg1 = (tiledb_filter_t *) 0 ;
  tiledb_filter_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_filter_t **)&jarg1; 
  result = (tiledb_filter_t **)copy_tiledb_filter_tpp(arg1);
  *(tiledb_filter_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1tiledb_1filter_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_filter_t **arg1 = (tiledb_filter_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_filter_t ***)&jarg1; 
  delete_tiledb_filter_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1filter_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  tiledb_filter_t **arg1 = (tiledb_filter_t **) 0 ;
  tiledb_filter_t *arg2 = (tiledb_filter_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_filter_t ***)&jarg1; 
  arg2 = *(tiledb_filter_t **)&jarg2; 
  tiledb_filter_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1filter_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_filter_t **arg1 = (tiledb_filter_t **) 0 ;
  tiledb_filter_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_filter_t ***)&jarg1; 
  result = (tiledb_filter_t *)tiledb_filter_tpp_value(arg1);
  *(tiledb_filter_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1tiledb_1filter_1list_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_filter_list_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_filter_list_t **)new_tiledb_filter_list_tpp();
  *(tiledb_filter_list_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1tiledb_1filter_1list_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_filter_list_t *arg1 = (tiledb_filter_list_t *) 0 ;
  tiledb_filter_list_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_filter_list_t **)&jarg1; 
  result = (tiledb_filter_list_t **)copy_tiledb_filter_list_tpp(arg1);
  *(tiledb_filter_list_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1tiledb_1filter_1list_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_filter_list_t **arg1 = (tiledb_filter_list_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_filter_list_t ***)&jarg1; 
  delete_tiledb_filter_list_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1filter_1list_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  tiledb_filter_list_t **arg1 = (tiledb_filter_list_t **) 0 ;
  tiledb_filter_list_t *arg2 = (tiledb_filter_list_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_filter_list_t ***)&jarg1; 
  arg2 = *(tiledb_filter_list_t **)&jarg2; 
  tiledb_filter_list_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1filter_1list_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_filter_list_t **arg1 = (tiledb_filter_list_t **) 0 ;
  tiledb_filter_list_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_filter_list_t ***)&jarg1; 
  result = (tiledb_filter_list_t *)tiledb_filter_list_tpp_value(arg1);
  *(tiledb_filter_list_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1tiledb_1vfs_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_vfs_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_vfs_t **)new_tiledb_vfs_tpp();
  *(tiledb_vfs_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1tiledb_1vfs_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_vfs_t *arg1 = (tiledb_vfs_t *) 0 ;
  tiledb_vfs_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_vfs_t **)&jarg1; 
  result = (tiledb_vfs_t **)copy_tiledb_vfs_tpp(arg1);
  *(tiledb_vfs_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1tiledb_1vfs_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_vfs_t **arg1 = (tiledb_vfs_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_vfs_t ***)&jarg1; 
  delete_tiledb_vfs_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  tiledb_vfs_t **arg1 = (tiledb_vfs_t **) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_vfs_t ***)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  tiledb_vfs_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_vfs_t **arg1 = (tiledb_vfs_t **) 0 ;
  tiledb_vfs_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_vfs_t ***)&jarg1; 
  result = (tiledb_vfs_t *)tiledb_vfs_tpp_value(arg1);
  *(tiledb_vfs_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1tiledb_1vfs_1fh_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_vfs_fh_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_vfs_fh_t **)new_tiledb_vfs_fh_tpp();
  *(tiledb_vfs_fh_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1tiledb_1vfs_1fh_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_vfs_fh_t *arg1 = (tiledb_vfs_fh_t *) 0 ;
  tiledb_vfs_fh_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_vfs_fh_t **)&jarg1; 
  result = (tiledb_vfs_fh_t **)copy_tiledb_vfs_fh_tpp(arg1);
  *(tiledb_vfs_fh_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1tiledb_1vfs_1fh_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_vfs_fh_t **arg1 = (tiledb_vfs_fh_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_vfs_fh_t ***)&jarg1; 
  delete_tiledb_vfs_fh_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1fh_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  tiledb_vfs_fh_t **arg1 = (tiledb_vfs_fh_t **) 0 ;
  tiledb_vfs_fh_t *arg2 = (tiledb_vfs_fh_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_vfs_fh_t ***)&jarg1; 
  arg2 = *(tiledb_vfs_fh_t **)&jarg2; 
  tiledb_vfs_fh_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1fh_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_vfs_fh_t **arg1 = (tiledb_vfs_fh_t **) 0 ;
  tiledb_vfs_fh_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_vfs_fh_t ***)&jarg1; 
  result = (tiledb_vfs_fh_t *)tiledb_vfs_fh_tpp_value(arg1);
  *(tiledb_vfs_fh_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1tiledb_1fragment_1info_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_fragment_info_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_fragment_info_t **)new_tiledb_fragment_info_tpp();
  *(tiledb_fragment_info_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1tiledb_1fragment_1info_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_fragment_info_t *arg1 = (tiledb_fragment_info_t *) 0 ;
  tiledb_fragment_info_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_fragment_info_t **)&jarg1; 
  result = (tiledb_fragment_info_t **)copy_tiledb_fragment_info_tpp(arg1);
  *(tiledb_fragment_info_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1tiledb_1fragment_1info_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_fragment_info_t **arg1 = (tiledb_fragment_info_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_fragment_info_t ***)&jarg1; 
  delete_tiledb_fragment_info_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  tiledb_fragment_info_t **arg1 = (tiledb_fragment_info_t **) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_fragment_info_t ***)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  tiledb_fragment_info_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_fragment_info_t **arg1 = (tiledb_fragment_info_t **) 0 ;
  tiledb_fragment_info_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_fragment_info_t ***)&jarg1; 
  result = (tiledb_fragment_info_t *)tiledb_fragment_info_tpp_value(arg1);
  *(tiledb_fragment_info_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1tiledb_1query_1condition_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_query_condition_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_query_condition_t **)new_tiledb_query_condition_tpp();
  *(tiledb_query_condition_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1tiledb_1query_1condition_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_query_condition_t *arg1 = (tiledb_query_condition_t *) 0 ;
  tiledb_query_condition_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_query_condition_t **)&jarg1; 
  result = (tiledb_query_condition_t **)copy_tiledb_query_condition_tpp(arg1);
  *(tiledb_query_condition_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1tiledb_1query_1condition_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_query_condition_t **arg1 = (tiledb_query_condition_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_query_condition_t ***)&jarg1; 
  delete_tiledb_query_condition_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1condition_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  tiledb_query_condition_t **arg1 = (tiledb_query_condition_t **) 0 ;
  tiledb_query_condition_t *arg2 = (tiledb_query_condition_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_query_condition_t ***)&jarg1; 
  arg2 = *(tiledb_query_condition_t **)&jarg2; 
  tiledb_query_condition_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1condition_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_query_condition_t **arg1 = (tiledb_query_condition_t **) 0 ;
  tiledb_query_condition_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_query_condition_t ***)&jarg1; 
  result = (tiledb_query_condition_t *)tiledb_query_condition_tpp_value(arg1);
  *(tiledb_query_condition_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1tiledb_1group_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_group_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_group_t **)new_tiledb_group_tpp();
  *(tiledb_group_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1tiledb_1group_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_group_t *arg1 = (tiledb_group_t *) 0 ;
  tiledb_group_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_group_t **)&jarg1; 
  result = (tiledb_group_t **)copy_tiledb_group_tpp(arg1);
  *(tiledb_group_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1tiledb_1group_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_group_t **arg1 = (tiledb_group_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_group_t ***)&jarg1; 
  delete_tiledb_group_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1group_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  tiledb_group_t **arg1 = (tiledb_group_t **) 0 ;
  tiledb_group_t *arg2 = (tiledb_group_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_group_t ***)&jarg1; 
  arg2 = *(tiledb_group_t **)&jarg2; 
  tiledb_group_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1group_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_group_t **arg1 = (tiledb_group_t **) 0 ;
  tiledb_group_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_group_t ***)&jarg1; 
  result = (tiledb_group_t *)tiledb_group_tpp_value(arg1);
  *(tiledb_group_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1capi_1return_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  capi_return_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (capi_return_t **)new_capi_return_tpp();
  *(capi_return_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1capi_1return_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  capi_return_t *arg1 = (capi_return_t *) 0 ;
  capi_return_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(capi_return_t **)&jarg1; 
  result = (capi_return_t **)copy_capi_return_tpp(arg1);
  *(capi_return_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1capi_1return_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  capi_return_t **arg1 = (capi_return_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(capi_return_t ***)&jarg1; 
  delete_capi_return_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_capi_1return_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  capi_return_t **arg1 = (capi_return_t **) 0 ;
  capi_return_t *arg2 = (capi_return_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(capi_return_t ***)&jarg1; 
  arg2 = *(capi_return_t **)&jarg2; 
  capi_return_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_capi_1return_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  capi_return_t **arg1 = (capi_return_t **) 0 ;
  capi_return_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(capi_return_t ***)&jarg1; 
  result = (capi_return_t *)capi_return_tpp_value(arg1);
  *(capi_return_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1tiledb_1consolidation_1plan_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_consolidation_plan_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_consolidation_plan_t **)new_tiledb_consolidation_plan_tpp();
  *(tiledb_consolidation_plan_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1tiledb_1consolidation_1plan_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_consolidation_plan_t *arg1 = (tiledb_consolidation_plan_t *) 0 ;
  tiledb_consolidation_plan_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_consolidation_plan_t **)&jarg1; 
  result = (tiledb_consolidation_plan_t **)copy_tiledb_consolidation_plan_tpp(arg1);
  *(tiledb_consolidation_plan_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1tiledb_1consolidation_1plan_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_consolidation_plan_t **arg1 = (tiledb_consolidation_plan_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_consolidation_plan_t ***)&jarg1; 
  delete_tiledb_consolidation_plan_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1consolidation_1plan_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  tiledb_consolidation_plan_t **arg1 = (tiledb_consolidation_plan_t **) 0 ;
  tiledb_consolidation_plan_t *arg2 = (tiledb_consolidation_plan_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_consolidation_plan_t ***)&jarg1; 
  arg2 = *(tiledb_consolidation_plan_t **)&jarg2; 
  tiledb_consolidation_plan_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1consolidation_1plan_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_consolidation_plan_t **arg1 = (tiledb_consolidation_plan_t **) 0 ;
  tiledb_consolidation_plan_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_consolidation_plan_t ***)&jarg1; 
  result = (tiledb_consolidation_plan_t *)tiledb_consolidation_plan_tpp_value(arg1);
  *(tiledb_consolidation_plan_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1tiledb_1array_1schema_1evolution_1tpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_array_schema_evolution_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_array_schema_evolution_t **)new_tiledb_array_schema_evolution_tpp();
  *(tiledb_array_schema_evolution_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_copy_1tiledb_1array_1schema_1evolution_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_array_schema_evolution_t *arg1 = (tiledb_array_schema_evolution_t *) 0 ;
  tiledb_array_schema_evolution_t **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_array_schema_evolution_t **)&jarg1; 
  result = (tiledb_array_schema_evolution_t **)copy_tiledb_array_schema_evolution_tpp(arg1);
  *(tiledb_array_schema_evolution_t ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1tiledb_1array_1schema_1evolution_1tpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_array_schema_evolution_t **arg1 = (tiledb_array_schema_evolution_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_array_schema_evolution_t ***)&jarg1; 
  delete_tiledb_array_schema_evolution_tpp(arg1);
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1evolution_1tpp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  tiledb_array_schema_evolution_t **arg1 = (tiledb_array_schema_evolution_t **) 0 ;
  tiledb_array_schema_evolution_t *arg2 = (tiledb_array_schema_evolution_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_array_schema_evolution_t ***)&jarg1; 
  arg2 = *(tiledb_array_schema_evolution_t **)&jarg2; 
  tiledb_array_schema_evolution_tpp_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1evolution_1tpp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_array_schema_evolution_t **arg1 = (tiledb_array_schema_evolution_t **) 0 ;
  tiledb_array_schema_evolution_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_array_schema_evolution_t ***)&jarg1; 
  result = (tiledb_array_schema_evolution_t *)tiledb_array_schema_evolution_tpp_value(arg1);
  *(tiledb_array_schema_evolution_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SwigValueWrapper< capi_return_t > arg1 ;
  capi_return_t *argp1 ;
  capi_status_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(capi_return_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null capi_return_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (capi_status_t)tiledb_status(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1status_1code(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SwigValueWrapper< capi_return_t > arg1 ;
  capi_return_t *argp1 ;
  capi_status_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(capi_return_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null capi_return_t");
    return 0;
  }
  arg1 = *argp1; 
  result = (capi_status_t)tiledb_status_code(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1error_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  tiledb_error_t *arg1 = (tiledb_error_t *) 0 ;
  char **arg2 = (char **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_error_t **)&jarg1; 
  arg2 = *(char ***)&jarg2; 
  result = tiledb_error_message(arg1,(char const **)arg2);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1error_1free(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_error_t **arg1 = (tiledb_error_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_error_t ***)&jarg1; 
  tiledb_error_free(arg1);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1config_1alloc(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  tiledb_config_t **arg1 = (tiledb_config_t **) 0 ;
  tiledb_error_t **arg2 = (tiledb_error_t **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_config_t ***)&jarg1; 
  arg2 = *(tiledb_error_t ***)&jarg2; 
  result = tiledb_config_alloc(arg1,arg2);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1config_1free(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_config_t **arg1 = (tiledb_config_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_config_t ***)&jarg1; 
  tiledb_config_free(arg1);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1config_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  tiledb_config_t *arg1 = (tiledb_config_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  tiledb_error_t **arg4 = (tiledb_error_t **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_config_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(tiledb_error_t ***)&jarg4; 
  result = tiledb_config_set(arg1,(char const *)arg2,(char const *)arg3,arg4);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1config_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  tiledb_config_t *arg1 = (tiledb_config_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  tiledb_error_t **arg4 = (tiledb_error_t **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_config_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(char ***)&jarg3; 
  arg4 = *(tiledb_error_t ***)&jarg4; 
  result = tiledb_config_get(arg1,(char const *)arg2,(char const **)arg3,arg4);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1config_1unset(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  tiledb_config_t *arg1 = (tiledb_config_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_error_t **arg3 = (tiledb_error_t **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_config_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(tiledb_error_t ***)&jarg3; 
  result = tiledb_config_unset(arg1,(char const *)arg2,arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1config_1load_1from_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  tiledb_config_t *arg1 = (tiledb_config_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_error_t **arg3 = (tiledb_error_t **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_config_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(tiledb_error_t ***)&jarg3; 
  result = tiledb_config_load_from_file(arg1,(char const *)arg2,arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1config_1save_1to_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  tiledb_config_t *arg1 = (tiledb_config_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_error_t **arg3 = (tiledb_error_t **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_config_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(tiledb_error_t ***)&jarg3; 
  result = tiledb_config_save_to_file(arg1,(char const *)arg2,arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1config_1compare(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  tiledb_config_t *arg1 = (tiledb_config_t *) 0 ;
  tiledb_config_t *arg2 = (tiledb_config_t *) 0 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_config_t **)&jarg1; 
  arg2 = *(tiledb_config_t **)&jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  result = tiledb_config_compare(arg1,arg2,arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1config_1iter_1alloc(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  tiledb_config_t *arg1 = (tiledb_config_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_config_iter_t **arg3 = (tiledb_config_iter_t **) 0 ;
  tiledb_error_t **arg4 = (tiledb_error_t **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_config_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(tiledb_config_iter_t ***)&jarg3; 
  arg4 = *(tiledb_error_t ***)&jarg4; 
  result = tiledb_config_iter_alloc(arg1,(char const *)arg2,arg3,arg4);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1config_1iter_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  tiledb_config_t *arg1 = (tiledb_config_t *) 0 ;
  tiledb_config_iter_t *arg2 = (tiledb_config_iter_t *) 0 ;
  char *arg3 = (char *) 0 ;
  tiledb_error_t **arg4 = (tiledb_error_t **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_config_t **)&jarg1; 
  arg2 = *(tiledb_config_iter_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(tiledb_error_t ***)&jarg4; 
  result = tiledb_config_iter_reset(arg1,arg2,(char const *)arg3,arg4);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1config_1iter_1free(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_config_iter_t **arg1 = (tiledb_config_iter_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_config_iter_t ***)&jarg1; 
  tiledb_config_iter_free(arg1);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1config_1iter_1here(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  tiledb_config_iter_t *arg1 = (tiledb_config_iter_t *) 0 ;
  char **arg2 = (char **) 0 ;
  char **arg3 = (char **) 0 ;
  tiledb_error_t **arg4 = (tiledb_error_t **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_config_iter_t **)&jarg1; 
  arg2 = *(char ***)&jarg2; 
  arg3 = *(char ***)&jarg3; 
  arg4 = *(tiledb_error_t ***)&jarg4; 
  result = tiledb_config_iter_here(arg1,(char const **)arg2,(char const **)arg3,arg4);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1config_1iter_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  tiledb_config_iter_t *arg1 = (tiledb_config_iter_t *) 0 ;
  tiledb_error_t **arg2 = (tiledb_error_t **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_config_iter_t **)&jarg1; 
  arg2 = *(tiledb_error_t ***)&jarg2; 
  result = tiledb_config_iter_next(arg1,arg2);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1config_1iter_1done(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  tiledb_config_iter_t *arg1 = (tiledb_config_iter_t *) 0 ;
  int32_t *arg2 = (int32_t *) 0 ;
  tiledb_error_t **arg3 = (tiledb_error_t **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_config_iter_t **)&jarg1; 
  arg2 = *(int32_t **)&jarg2; 
  arg3 = *(tiledb_error_t ***)&jarg3; 
  result = tiledb_config_iter_done(arg1,arg2,arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1filesystem_1to_1str(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  tiledb_filesystem_t arg1 ;
  char **arg2 = (char **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_filesystem_t)jarg1; 
  arg2 = *(char ***)&jarg2; 
  result = tiledb_filesystem_to_str(arg1,(char const **)arg2);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1filesystem_1from_1str(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  tiledb_filesystem_t *arg2 = (tiledb_filesystem_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(tiledb_filesystem_t **)&jarg2; 
  result = tiledb_filesystem_from_str((char const *)arg1,arg2);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1ctx_1alloc(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  tiledb_config_t *arg1 = (tiledb_config_t *) 0 ;
  tiledb_ctx_t **arg2 = (tiledb_ctx_t **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_config_t **)&jarg1; 
  arg2 = *(tiledb_ctx_t ***)&jarg2; 
  result = tiledb_ctx_alloc(arg1,arg2);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1ctx_1free(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_ctx_t **arg1 = (tiledb_ctx_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t ***)&jarg1; 
  tiledb_ctx_free(arg1);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1ctx_1get_1stats(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char **arg2 = (char **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(char ***)&jarg2; 
  result = tiledb_ctx_get_stats(arg1,arg2);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1ctx_1get_1config(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_config_t **arg2 = (tiledb_config_t **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_config_t ***)&jarg2; 
  result = tiledb_ctx_get_config(arg1,arg2);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1ctx_1get_1last_1error(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_error_t **arg2 = (tiledb_error_t **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_error_t ***)&jarg2; 
  result = tiledb_ctx_get_last_error(arg1,arg2);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1ctx_1is_1supported_1fs(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_filesystem_t arg2 ;
  int32_t *arg3 = (int32_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = (tiledb_filesystem_t)jarg2; 
  arg3 = *(int32_t **)&jarg3; 
  result = tiledb_ctx_is_supported_fs(arg1,arg2,arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1ctx_1cancel_1tasks(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  result = tiledb_ctx_cancel_tasks(arg1);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1ctx_1set_1tag(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = tiledb_ctx_set_tag(arg1,(char const *)arg2,(char const *)arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1datatype_1to_1str(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  tiledb_datatype_t arg1 ;
  char **arg2 = (char **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_datatype_t)jarg1; 
  arg2 = *(char ***)&jarg2; 
  result = tiledb_datatype_to_str(arg1,(char const **)arg2);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1datatype_1from_1str(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  tiledb_datatype_t *arg2 = (tiledb_datatype_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(tiledb_datatype_t **)&jarg2; 
  result = tiledb_datatype_from_str((char const *)arg1,arg2);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1datatype_1size(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jobject jresult = 0 ;
  tiledb_datatype_t arg1 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_datatype_t)jarg1; 
  result = (uint64_t)tiledb_datatype_size(arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1buffer_1alloc(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_buffer_t **arg2 = (tiledb_buffer_t **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_buffer_t ***)&jarg2; 
  result = tiledb_buffer_alloc(arg1,arg2);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1buffer_1free(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_buffer_t **arg1 = (tiledb_buffer_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_buffer_t ***)&jarg1; 
  tiledb_buffer_free(arg1);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1buffer_1set_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_buffer_t *arg2 = (tiledb_buffer_t *) 0 ;
  tiledb_datatype_t arg3 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_buffer_t **)&jarg2; 
  arg3 = (tiledb_datatype_t)jarg3; 
  result = tiledb_buffer_set_type(arg1,arg2,arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1buffer_1get_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_buffer_t *arg2 = (tiledb_buffer_t *) 0 ;
  tiledb_datatype_t *arg3 = (tiledb_datatype_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_buffer_t **)&jarg2; 
  arg3 = *(tiledb_datatype_t **)&jarg3; 
  result = tiledb_buffer_get_type(arg1,(tiledb_buffer_handle_t const *)arg2,arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1buffer_1get_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_buffer_t *arg2 = (tiledb_buffer_t *) 0 ;
  void **arg3 = (void **) 0 ;
  uint64_t *arg4 = (uint64_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_buffer_t **)&jarg2; 
  arg3 = *(void ***)&jarg3; 
  arg4 = *(uint64_t **)&jarg4; 
  result = tiledb_buffer_get_data(arg1,(tiledb_buffer_handle_t const *)arg2,arg3,arg4);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1buffer_1set_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg4) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_buffer_t *arg2 = (tiledb_buffer_t *) 0 ;
  void *arg3 = (void *) 0 ;
  uint64_t arg4 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_buffer_t **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = tiledb_buffer_set_data(arg1,arg2,arg3,arg4);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1data_1order_1to_1str(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  tiledb_data_order_t arg1 ;
  char **arg2 = (char **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_data_order_t)jarg1; 
  arg2 = *(char ***)&jarg2; 
  result = tiledb_data_order_to_str(arg1,(char const **)arg2);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1data_1order_1from_1str(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  tiledb_data_order_t *arg2 = (tiledb_data_order_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(tiledb_data_order_t **)&jarg2; 
  result = tiledb_data_order_from_str((char const *)arg1,arg2);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1filter_1type_1to_1str(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  tiledb_filter_type_t arg1 ;
  char **arg2 = (char **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_filter_type_t)jarg1; 
  arg2 = *(char ***)&jarg2; 
  result = tiledb_filter_type_to_str(arg1,(char const **)arg2);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1filter_1type_1from_1str(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  tiledb_filter_type_t *arg2 = (tiledb_filter_type_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(tiledb_filter_type_t **)&jarg2; 
  result = tiledb_filter_type_from_str((char const *)arg1,arg2);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1filter_1option_1to_1str(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  tiledb_filter_option_t arg1 ;
  char **arg2 = (char **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_filter_option_t)jarg1; 
  arg2 = *(char ***)&jarg2; 
  result = tiledb_filter_option_to_str(arg1,(char const **)arg2);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1filter_1option_1from_1str(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  tiledb_filter_option_t *arg2 = (tiledb_filter_option_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(tiledb_filter_option_t **)&jarg2; 
  result = tiledb_filter_option_from_str((char const *)arg1,arg2);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1filter_1alloc(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_filter_type_t arg2 ;
  tiledb_filter_t **arg3 = (tiledb_filter_t **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = (tiledb_filter_type_t)jarg2; 
  arg3 = *(tiledb_filter_t ***)&jarg3; 
  result = tiledb_filter_alloc(arg1,arg2,arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1filter_1free(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_filter_t **arg1 = (tiledb_filter_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_filter_t ***)&jarg1; 
  tiledb_filter_free(arg1);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1filter_1get_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_filter_t *arg2 = (tiledb_filter_t *) 0 ;
  tiledb_filter_type_t *arg3 = (tiledb_filter_type_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_filter_t **)&jarg2; 
  arg3 = *(tiledb_filter_type_t **)&jarg3; 
  result = tiledb_filter_get_type(arg1,arg2,arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1filter_1set_1option(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_filter_t *arg2 = (tiledb_filter_t *) 0 ;
  tiledb_filter_option_t arg3 ;
  void *arg4 = (void *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_filter_t **)&jarg2; 
  arg3 = (tiledb_filter_option_t)jarg3; 
  arg4 = *(void **)&jarg4; 
  result = tiledb_filter_set_option(arg1,arg2,arg3,(void const *)arg4);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1filter_1get_1option(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_filter_t *arg2 = (tiledb_filter_t *) 0 ;
  tiledb_filter_option_t arg3 ;
  void *arg4 = (void *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_filter_t **)&jarg2; 
  arg3 = (tiledb_filter_option_t)jarg3; 
  arg4 = *(void **)&jarg4; 
  result = tiledb_filter_get_option(arg1,arg2,arg3,arg4);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1filter_1list_1alloc(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_filter_list_t **arg2 = (tiledb_filter_list_t **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_filter_list_t ***)&jarg2; 
  result = tiledb_filter_list_alloc(arg1,arg2);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1filter_1list_1free(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_filter_list_t **arg1 = (tiledb_filter_list_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_filter_list_t ***)&jarg1; 
  tiledb_filter_list_free(arg1);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1filter_1list_1add_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_filter_list_t *arg2 = (tiledb_filter_list_t *) 0 ;
  tiledb_filter_t *arg3 = (tiledb_filter_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_filter_list_t **)&jarg2; 
  arg3 = *(tiledb_filter_t **)&jarg3; 
  result = tiledb_filter_list_add_filter(arg1,arg2,arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1filter_1list_1set_1max_1chunk_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_filter_list_t *arg2 = (tiledb_filter_list_t *) 0 ;
  uint32_t arg3 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_filter_list_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  result = tiledb_filter_list_set_max_chunk_size(arg1,arg2,arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1filter_1list_1get_1nfilters(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_filter_list_t *arg2 = (tiledb_filter_list_t *) 0 ;
  uint32_t *arg3 = (uint32_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_filter_list_t **)&jarg2; 
  arg3 = *(uint32_t **)&jarg3; 
  result = tiledb_filter_list_get_nfilters(arg1,(tiledb_filter_list_handle_t const *)arg2,arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1filter_1list_1get_1filter_1from_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_filter_list_t *arg2 = (tiledb_filter_list_t *) 0 ;
  uint32_t arg3 ;
  tiledb_filter_t **arg4 = (tiledb_filter_t **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_filter_list_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(tiledb_filter_t ***)&jarg4; 
  result = tiledb_filter_list_get_filter_from_index(arg1,(tiledb_filter_list_handle_t const *)arg2,arg3,arg4);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1filter_1list_1get_1max_1chunk_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_filter_list_t *arg2 = (tiledb_filter_list_t *) 0 ;
  uint32_t *arg3 = (uint32_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_filter_list_t **)&jarg2; 
  arg3 = *(uint32_t **)&jarg3; 
  result = tiledb_filter_list_get_max_chunk_size(arg1,(tiledb_filter_list_handle_t const *)arg2,arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1group_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = tiledb_group_create(arg1,(char const *)arg2);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1object_1type_1to_1str(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  tiledb_object_t arg1 ;
  char **arg2 = (char **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_object_t)jarg1; 
  arg2 = *(char ***)&jarg2; 
  result = tiledb_object_type_to_str(arg1,(char const **)arg2);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1object_1type_1from_1str(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  tiledb_object_t *arg2 = (tiledb_object_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(tiledb_object_t **)&jarg2; 
  result = tiledb_object_type_from_str((char const *)arg1,arg2);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1walk_1order_1to_1str(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  tiledb_walk_order_t arg1 ;
  char **arg2 = (char **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_walk_order_t)jarg1; 
  arg2 = *(char ***)&jarg2; 
  result = tiledb_walk_order_to_str(arg1,(char const **)arg2);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1walk_1order_1from_1str(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  tiledb_walk_order_t *arg2 = (tiledb_walk_order_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(tiledb_walk_order_t **)&jarg2; 
  result = tiledb_walk_order_from_str((char const *)arg1,arg2);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1type_1to_1str(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  tiledb_query_type_t arg1 ;
  char **arg2 = (char **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_query_type_t)jarg1; 
  arg2 = *(char ***)&jarg2; 
  result = tiledb_query_type_to_str(arg1,(char const **)arg2);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1type_1from_1str(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  tiledb_query_type_t *arg2 = (tiledb_query_type_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(tiledb_query_type_t **)&jarg2; 
  result = tiledb_query_type_from_str((char const *)arg1,arg2);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1string_1view(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  tiledb_string_t *arg1 = (tiledb_string_t *) 0 ;
  char **arg2 = (char **) 0 ;
  size_t *arg3 = (size_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_string_t **)&jarg1; 
  arg2 = *(char ***)&jarg2; 
  arg3 = *(size_t **)&jarg3; 
  result = tiledb_string_view(arg1,(char const **)arg2,arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1string_1free(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  tiledb_string_t **arg1 = (tiledb_string_t **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_string_t ***)&jarg1; 
  result = tiledb_string_free(arg1);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1mode_1to_1str(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  tiledb_vfs_mode_t arg1 ;
  char **arg2 = (char **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_vfs_mode_t)jarg1; 
  arg2 = *(char ***)&jarg2; 
  result = tiledb_vfs_mode_to_str(arg1,(char const **)arg2);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1mode_1from_1str(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  tiledb_vfs_mode_t *arg2 = (tiledb_vfs_mode_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(tiledb_vfs_mode_t **)&jarg2; 
  result = tiledb_vfs_mode_from_str((char const *)arg1,arg2);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1alloc(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_config_t *arg2 = (tiledb_config_t *) 0 ;
  tiledb_vfs_t **arg3 = (tiledb_vfs_t **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_config_t **)&jarg2; 
  arg3 = *(tiledb_vfs_t ***)&jarg3; 
  result = tiledb_vfs_alloc(arg1,arg2,arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1free(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_vfs_t **arg1 = (tiledb_vfs_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_vfs_t ***)&jarg1; 
  tiledb_vfs_free(arg1);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1get_1config(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  tiledb_config_t **arg3 = (tiledb_config_t **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = *(tiledb_config_t ***)&jarg3; 
  result = tiledb_vfs_get_config(arg1,arg2,arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1create_1bucket(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = tiledb_vfs_create_bucket(arg1,arg2,(char const *)arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1remove_1bucket(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = tiledb_vfs_remove_bucket(arg1,arg2,(char const *)arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1empty_1bucket(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = tiledb_vfs_empty_bucket(arg1,arg2,(char const *)arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1is_1empty_1bucket(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int32_t *arg4 = (int32_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(int32_t **)&jarg4; 
  result = tiledb_vfs_is_empty_bucket(arg1,arg2,(char const *)arg3,arg4);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1is_1bucket(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int32_t *arg4 = (int32_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(int32_t **)&jarg4; 
  result = tiledb_vfs_is_bucket(arg1,arg2,(char const *)arg3,arg4);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1create_1dir(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = tiledb_vfs_create_dir(arg1,arg2,(char const *)arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1is_1dir(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int32_t *arg4 = (int32_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(int32_t **)&jarg4; 
  result = tiledb_vfs_is_dir(arg1,arg2,(char const *)arg3,arg4);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1remove_1dir(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = tiledb_vfs_remove_dir(arg1,arg2,(char const *)arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1is_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int32_t *arg4 = (int32_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(int32_t **)&jarg4; 
  result = tiledb_vfs_is_file(arg1,arg2,(char const *)arg3,arg4);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1remove_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = tiledb_vfs_remove_file(arg1,arg2,(char const *)arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1dir_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  uint64_t *arg4 = (uint64_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(uint64_t **)&jarg4; 
  result = tiledb_vfs_dir_size(arg1,arg2,(char const *)arg3,arg4);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1file_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  uint64_t *arg4 = (uint64_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(uint64_t **)&jarg4; 
  result = tiledb_vfs_file_size(arg1,arg2,(char const *)arg3,arg4);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1move_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = tiledb_vfs_move_file(arg1,arg2,(char const *)arg3,(char const *)arg4);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1move_1dir(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = tiledb_vfs_move_dir(arg1,arg2,(char const *)arg3,(char const *)arg4);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1copy_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = tiledb_vfs_copy_file(arg1,arg2,(char const *)arg3,(char const *)arg4);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1copy_1dir(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = tiledb_vfs_copy_dir(arg1,arg2,(char const *)arg3,(char const *)arg4);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jint jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  tiledb_vfs_mode_t arg4 ;
  tiledb_vfs_fh_t **arg5 = (tiledb_vfs_fh_t **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (tiledb_vfs_mode_t)jarg4; 
  arg5 = *(tiledb_vfs_fh_t ***)&jarg5; 
  result = tiledb_vfs_open(arg1,arg2,(char const *)arg3,arg4,arg5);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_fh_t *arg2 = (tiledb_vfs_fh_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_fh_t **)&jarg2; 
  result = tiledb_vfs_close(arg1,arg2);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg3, jlong jarg4, jobject jarg5) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_fh_t *arg2 = (tiledb_vfs_fh_t *) 0 ;
  uint64_t arg3 ;
  void *arg4 = (void *) 0 ;
  uint64_t arg5 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_fh_t **)&jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg4 = *(void **)&jarg4; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg5);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg5, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg5 = 0;
    if (sz > 0) {
      arg5 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg5 = (arg5 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = tiledb_vfs_read(arg1,arg2,arg3,arg4,arg5);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg4) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_fh_t *arg2 = (tiledb_vfs_fh_t *) 0 ;
  void *arg3 = (void *) 0 ;
  uint64_t arg4 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_fh_t **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = tiledb_vfs_write(arg1,arg2,(void const *)arg3,arg4);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1sync(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_fh_t *arg2 = (tiledb_vfs_fh_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_fh_t **)&jarg2; 
  result = tiledb_vfs_sync(arg1,arg2);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1ls(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int32_t (*arg4)(char const *,void *) = (int32_t (*)(char const *,void *)) 0 ;
  void *arg5 = (void *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(int32_t (**)(char const *,void *))&jarg4; 
  arg5 = *(void **)&jarg5; 
  result = tiledb_vfs_ls(arg1,arg2,(char const *)arg3,arg4,arg5);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1fh_1free(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_vfs_fh_t **arg1 = (tiledb_vfs_fh_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_vfs_fh_t ***)&jarg1; 
  tiledb_vfs_fh_free(arg1);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1fh_1is_1closed(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_fh_t *arg2 = (tiledb_vfs_fh_t *) 0 ;
  int32_t *arg3 = (int32_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_fh_t **)&jarg2; 
  arg3 = *(int32_t **)&jarg3; 
  result = tiledb_vfs_fh_is_closed(arg1,arg2,arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1vfs_1touch(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_vfs_t *arg2 = (tiledb_vfs_t *) 0 ;
  char *arg3 = (char *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_vfs_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = tiledb_vfs_touch(arg1,arg2,(char const *)arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1type_1to_1str(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jint jresult = 0 ;
  tiledb_array_type_t arg1 ;
  char **arg2 = (char **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_array_type_t)jarg1; 
  arg2 = *(char ***)&jarg2; 
  result = (int32_t)tiledb_array_type_to_str(arg1,(char const **)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1type_1from_1str(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  tiledb_array_type_t *arg2 = (tiledb_array_type_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(tiledb_array_type_t **)&jarg2; 
  result = (int32_t)tiledb_array_type_from_str((char const *)arg1,arg2);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1layout_1to_1str(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jint jresult = 0 ;
  tiledb_layout_t arg1 ;
  char **arg2 = (char **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_layout_t)jarg1; 
  arg2 = *(char ***)&jarg2; 
  result = (int32_t)tiledb_layout_to_str(arg1,(char const **)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1layout_1from_1str(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  tiledb_layout_t *arg2 = (tiledb_layout_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(tiledb_layout_t **)&jarg2; 
  result = (int32_t)tiledb_layout_from_str((char const *)arg1,arg2);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1encryption_1type_1to_1str(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jint jresult = 0 ;
  tiledb_encryption_type_t arg1 ;
  char **arg2 = (char **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_encryption_type_t)jarg1; 
  arg2 = *(char ***)&jarg2; 
  result = (int32_t)tiledb_encryption_type_to_str(arg1,(char const **)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1encryption_1type_1from_1str(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  tiledb_encryption_type_t *arg2 = (tiledb_encryption_type_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(tiledb_encryption_type_t **)&jarg2; 
  result = (int32_t)tiledb_encryption_type_from_str((char const *)arg1,arg2);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1status_1to_1str(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jint jresult = 0 ;
  tiledb_query_status_t arg1 ;
  char **arg2 = (char **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_query_status_t)jarg1; 
  arg2 = *(char ***)&jarg2; 
  result = (int32_t)tiledb_query_status_to_str(arg1,(char const **)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1status_1from_1str(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  tiledb_query_status_t *arg2 = (tiledb_query_status_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(tiledb_query_status_t **)&jarg2; 
  result = (int32_t)tiledb_query_status_from_str((char const *)arg1,arg2);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1var_1num(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint32_t)tiledb_var_num();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1max_1path(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint32_t)tiledb_max_path();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1offset_1size(JNIEnv *jenv, jclass jcls) {
  jobject jresult = 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint64_t)tiledb_offset_size();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1timestamp_1now_1ms(JNIEnv *jenv, jclass jcls) {
  jobject jresult = 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint64_t)tiledb_timestamp_now_ms();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1timestamps(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)tiledb_timestamps();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  int32_t *arg1 = (int32_t *) 0 ;
  int32_t *arg2 = (int32_t *) 0 ;
  int32_t *arg3 = (int32_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int32_t **)&jarg1; 
  arg2 = *(int32_t **)&jarg2; 
  arg3 = *(int32_t **)&jarg3; 
  tiledb_version(arg1,arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1buffer_1list_1alloc(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_buffer_list_t **arg2 = (tiledb_buffer_list_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_buffer_list_t ***)&jarg2; 
  result = (int32_t)tiledb_buffer_list_alloc(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1buffer_1list_1free(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_buffer_list_t **arg1 = (tiledb_buffer_list_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_buffer_list_t ***)&jarg1; 
  tiledb_buffer_list_free(arg1);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1buffer_1list_1get_1num_1buffers(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_buffer_list_t *arg2 = (tiledb_buffer_list_t *) 0 ;
  uint64_t *arg3 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_buffer_list_t **)&jarg2; 
  arg3 = *(uint64_t **)&jarg3; 
  result = (int32_t)tiledb_buffer_list_get_num_buffers(arg1,(tiledb_buffer_list_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1buffer_1list_1get_1buffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_buffer_list_t *arg2 = (tiledb_buffer_list_t *) 0 ;
  uint64_t arg3 ;
  tiledb_buffer_t **arg4 = (tiledb_buffer_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_buffer_list_t **)&jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg4 = *(tiledb_buffer_t ***)&jarg4; 
  result = (int32_t)tiledb_buffer_list_get_buffer(arg1,(tiledb_buffer_list_t const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1buffer_1list_1get_1total_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_buffer_list_t *arg2 = (tiledb_buffer_list_t *) 0 ;
  uint64_t *arg3 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_buffer_list_t **)&jarg2; 
  arg3 = *(uint64_t **)&jarg3; 
  result = (int32_t)tiledb_buffer_list_get_total_size(arg1,(tiledb_buffer_list_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1buffer_1list_1flatten(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_buffer_list_t *arg2 = (tiledb_buffer_list_t *) 0 ;
  tiledb_buffer_t **arg3 = (tiledb_buffer_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_buffer_list_t **)&jarg2; 
  arg3 = *(tiledb_buffer_t ***)&jarg3; 
  result = (int32_t)tiledb_buffer_list_flatten(arg1,(tiledb_buffer_list_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1attribute_1alloc(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_datatype_t arg3 ;
  tiledb_attribute_t **arg4 = (tiledb_attribute_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (tiledb_datatype_t)jarg3; 
  arg4 = *(tiledb_attribute_t ***)&jarg4; 
  result = (int32_t)tiledb_attribute_alloc(arg1,(char const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1attribute_1free(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_attribute_t **arg1 = (tiledb_attribute_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_attribute_t ***)&jarg1; 
  tiledb_attribute_free(arg1);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1attribute_1set_1nullable(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jshort jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  uint8_t arg3 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  arg3 = (uint8_t)jarg3; 
  result = (int32_t)tiledb_attribute_set_nullable(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1attribute_1set_1filter_1list(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  tiledb_filter_list_t *arg3 = (tiledb_filter_list_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  arg3 = *(tiledb_filter_list_t **)&jarg3; 
  result = (int32_t)tiledb_attribute_set_filter_list(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1attribute_1set_1cell_1val_1num(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  uint32_t arg3 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  result = (int32_t)tiledb_attribute_set_cell_val_num(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1attribute_1get_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  char **arg3 = (char **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  arg3 = *(char ***)&jarg3; 
  result = (int32_t)tiledb_attribute_get_name(arg1,(tiledb_attribute_t const *)arg2,(char const **)arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1attribute_1get_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  tiledb_datatype_t *arg3 = (tiledb_datatype_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  arg3 = *(tiledb_datatype_t **)&jarg3; 
  result = (int32_t)tiledb_attribute_get_type(arg1,(tiledb_attribute_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1attribute_1get_1nullable(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  arg3 = *(uint8_t **)&jarg3; 
  result = (int32_t)tiledb_attribute_get_nullable(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1attribute_1get_1filter_1list(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  tiledb_filter_list_t **arg3 = (tiledb_filter_list_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  arg3 = *(tiledb_filter_list_t ***)&jarg3; 
  result = (int32_t)tiledb_attribute_get_filter_list(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1attribute_1get_1cell_1val_1num(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  uint32_t *arg3 = (uint32_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  arg3 = *(uint32_t **)&jarg3; 
  result = (int32_t)tiledb_attribute_get_cell_val_num(arg1,(tiledb_attribute_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1attribute_1get_1cell_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  uint64_t *arg3 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  arg3 = *(uint64_t **)&jarg3; 
  result = (int32_t)tiledb_attribute_get_cell_size(arg1,(tiledb_attribute_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1attribute_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  FILE *arg3 = (FILE *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  arg3 = *(FILE **)&jarg3; 
  result = (int32_t)tiledb_attribute_dump(arg1,(tiledb_attribute_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1attribute_1set_1fill_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  void *arg3 = (void *) 0 ;
  uint64_t arg4 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (int32_t)tiledb_attribute_set_fill_value(arg1,arg2,(void const *)arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1attribute_1get_1fill_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  void **arg3 = (void **) 0 ;
  uint64_t *arg4 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  arg3 = *(void ***)&jarg3; 
  arg4 = *(uint64_t **)&jarg4; 
  result = (int32_t)tiledb_attribute_get_fill_value(arg1,arg2,(void const **)arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1attribute_1set_1fill_1value_1nullable(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg4, jshort jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  void *arg3 = (void *) 0 ;
  uint64_t arg4 ;
  uint8_t arg5 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = (uint8_t)jarg5; 
  result = (int32_t)tiledb_attribute_set_fill_value_nullable(arg1,arg2,(void const *)arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1attribute_1get_1fill_1value_1nullable(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  void **arg3 = (void **) 0 ;
  uint64_t *arg4 = (uint64_t *) 0 ;
  uint8_t *arg5 = (uint8_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  arg3 = *(void ***)&jarg3; 
  arg4 = *(uint64_t **)&jarg4; 
  arg5 = *(uint8_t **)&jarg5; 
  result = (int32_t)tiledb_attribute_get_fill_value_nullable(arg1,arg2,(void const **)arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1domain_1alloc(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_domain_t **arg2 = (tiledb_domain_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_domain_t ***)&jarg2; 
  result = (int32_t)tiledb_domain_alloc(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1domain_1free(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_domain_t **arg1 = (tiledb_domain_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_domain_t ***)&jarg1; 
  tiledb_domain_free(arg1);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1domain_1get_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_domain_t *arg2 = (tiledb_domain_t *) 0 ;
  tiledb_datatype_t *arg3 = (tiledb_datatype_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_domain_t **)&jarg2; 
  arg3 = *(tiledb_datatype_t **)&jarg3; 
  result = (int32_t)tiledb_domain_get_type(arg1,(tiledb_domain_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1domain_1get_1ndim(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_domain_t *arg2 = (tiledb_domain_t *) 0 ;
  uint32_t *arg3 = (uint32_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_domain_t **)&jarg2; 
  arg3 = *(uint32_t **)&jarg3; 
  result = (int32_t)tiledb_domain_get_ndim(arg1,(tiledb_domain_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1domain_1add_1dimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_domain_t *arg2 = (tiledb_domain_t *) 0 ;
  tiledb_dimension_t *arg3 = (tiledb_dimension_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_domain_t **)&jarg2; 
  arg3 = *(tiledb_dimension_t **)&jarg3; 
  result = (int32_t)tiledb_domain_add_dimension(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1domain_1get_1dimension_1from_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_domain_t *arg2 = (tiledb_domain_t *) 0 ;
  uint32_t arg3 ;
  tiledb_dimension_t **arg4 = (tiledb_dimension_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_domain_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(tiledb_dimension_t ***)&jarg4; 
  result = (int32_t)tiledb_domain_get_dimension_from_index(arg1,(tiledb_domain_t const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1domain_1get_1dimension_1from_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_domain_t *arg2 = (tiledb_domain_t *) 0 ;
  char *arg3 = (char *) 0 ;
  tiledb_dimension_t **arg4 = (tiledb_dimension_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_domain_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(tiledb_dimension_t ***)&jarg4; 
  result = (int32_t)tiledb_domain_get_dimension_from_name(arg1,(tiledb_domain_t const *)arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1domain_1has_1dimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_domain_t *arg2 = (tiledb_domain_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int32_t *arg4 = (int32_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_domain_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(int32_t **)&jarg4; 
  result = (int32_t)tiledb_domain_has_dimension(arg1,(tiledb_domain_t const *)arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1domain_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_domain_t *arg2 = (tiledb_domain_t *) 0 ;
  FILE *arg3 = (FILE *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_domain_t **)&jarg2; 
  arg3 = *(FILE **)&jarg3; 
  result = (int32_t)tiledb_domain_dump(arg1,(tiledb_domain_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1dimension_1alloc(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_datatype_t arg3 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  tiledb_dimension_t **arg6 = (tiledb_dimension_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (tiledb_datatype_t)jarg3; 
  arg4 = *(void **)&jarg4; 
  arg5 = *(void **)&jarg5; 
  arg6 = *(tiledb_dimension_t ***)&jarg6; 
  result = (int32_t)tiledb_dimension_alloc(arg1,(char const *)arg2,arg3,(void const *)arg4,(void const *)arg5,arg6);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1dimension_1free(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_dimension_t **arg1 = (tiledb_dimension_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_dimension_t ***)&jarg1; 
  tiledb_dimension_free(arg1);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1dimension_1set_1filter_1list(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_t *arg2 = (tiledb_dimension_t *) 0 ;
  tiledb_filter_list_t *arg3 = (tiledb_filter_list_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_dimension_t **)&jarg2; 
  arg3 = *(tiledb_filter_list_t **)&jarg3; 
  result = (int32_t)tiledb_dimension_set_filter_list(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1dimension_1set_1cell_1val_1num(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_t *arg2 = (tiledb_dimension_t *) 0 ;
  uint32_t arg3 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_dimension_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  result = (int32_t)tiledb_dimension_set_cell_val_num(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1dimension_1get_1filter_1list(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_t *arg2 = (tiledb_dimension_t *) 0 ;
  tiledb_filter_list_t **arg3 = (tiledb_filter_list_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_dimension_t **)&jarg2; 
  arg3 = *(tiledb_filter_list_t ***)&jarg3; 
  result = (int32_t)tiledb_dimension_get_filter_list(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1dimension_1get_1cell_1val_1num(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_t *arg2 = (tiledb_dimension_t *) 0 ;
  uint32_t *arg3 = (uint32_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_dimension_t **)&jarg2; 
  arg3 = *(uint32_t **)&jarg3; 
  result = (int32_t)tiledb_dimension_get_cell_val_num(arg1,(tiledb_dimension_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1dimension_1get_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_t *arg2 = (tiledb_dimension_t *) 0 ;
  char **arg3 = (char **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_dimension_t **)&jarg2; 
  arg3 = *(char ***)&jarg3; 
  result = (int32_t)tiledb_dimension_get_name(arg1,(tiledb_dimension_t const *)arg2,(char const **)arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1dimension_1get_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_t *arg2 = (tiledb_dimension_t *) 0 ;
  tiledb_datatype_t *arg3 = (tiledb_datatype_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_dimension_t **)&jarg2; 
  arg3 = *(tiledb_datatype_t **)&jarg3; 
  result = (int32_t)tiledb_dimension_get_type(arg1,(tiledb_dimension_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1dimension_1get_1domain(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_t *arg2 = (tiledb_dimension_t *) 0 ;
  void **arg3 = (void **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_dimension_t **)&jarg2; 
  arg3 = *(void ***)&jarg3; 
  result = (int32_t)tiledb_dimension_get_domain(arg1,(tiledb_dimension_t const *)arg2,(void const **)arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1dimension_1get_1tile_1extent(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_t *arg2 = (tiledb_dimension_t *) 0 ;
  void **arg3 = (void **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_dimension_t **)&jarg2; 
  arg3 = *(void ***)&jarg3; 
  result = (int32_t)tiledb_dimension_get_tile_extent(arg1,(tiledb_dimension_t const *)arg2,(void const **)arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1dimension_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_t *arg2 = (tiledb_dimension_t *) 0 ;
  FILE *arg3 = (FILE *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_dimension_t **)&jarg2; 
  arg3 = *(FILE **)&jarg3; 
  result = (int32_t)tiledb_dimension_dump(arg1,(tiledb_dimension_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1alloc(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_type_t arg2 ;
  tiledb_array_schema_t **arg3 = (tiledb_array_schema_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = (tiledb_array_type_t)jarg2; 
  arg3 = *(tiledb_array_schema_t ***)&jarg3; 
  result = (int32_t)tiledb_array_schema_alloc(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1free(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_array_schema_t **arg1 = (tiledb_array_schema_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_array_schema_t ***)&jarg1; 
  tiledb_array_schema_free(arg1);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1add_1attribute(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_attribute_t *arg3 = (tiledb_attribute_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = *(tiledb_attribute_t **)&jarg3; 
  result = (int32_t)tiledb_array_schema_add_attribute(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1set_1allows_1dups(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  int arg3 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int32_t)tiledb_array_schema_set_allows_dups(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1get_1allows_1dups(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  int *arg3 = (int *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (int32_t)tiledb_array_schema_get_allows_dups(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1get_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  uint32_t *arg3 = (uint32_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = *(uint32_t **)&jarg3; 
  result = (int32_t)tiledb_array_schema_get_version(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1set_1domain(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_domain_t *arg3 = (tiledb_domain_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = *(tiledb_domain_t **)&jarg3; 
  result = (int32_t)tiledb_array_schema_set_domain(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1set_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  uint64_t arg3 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (int32_t)tiledb_array_schema_set_capacity(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1set_1cell_1order(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_layout_t arg3 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = (tiledb_layout_t)jarg3; 
  result = (int32_t)tiledb_array_schema_set_cell_order(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1set_1tile_1order(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_layout_t arg3 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = (tiledb_layout_t)jarg3; 
  result = (int32_t)tiledb_array_schema_set_tile_order(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1set_1coords_1filter_1list(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_filter_list_t *arg3 = (tiledb_filter_list_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = *(tiledb_filter_list_t **)&jarg3; 
  result = (int32_t)tiledb_array_schema_set_coords_filter_list(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1set_1offsets_1filter_1list(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_filter_list_t *arg3 = (tiledb_filter_list_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = *(tiledb_filter_list_t **)&jarg3; 
  result = (int32_t)tiledb_array_schema_set_offsets_filter_list(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1set_1validity_1filter_1list(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_filter_list_t *arg3 = (tiledb_filter_list_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = *(tiledb_filter_list_t **)&jarg3; 
  result = (int32_t)tiledb_array_schema_set_validity_filter_list(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1check(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  result = (int32_t)tiledb_array_schema_check(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1load(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_array_schema_t **arg3 = (tiledb_array_schema_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(tiledb_array_schema_t ***)&jarg3; 
  result = (int32_t)tiledb_array_schema_load(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1load_1with_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_encryption_type_t arg3 ;
  void *arg4 = (void *) 0 ;
  uint32_t arg5 ;
  tiledb_array_schema_t **arg6 = (tiledb_array_schema_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (tiledb_encryption_type_t)jarg3; 
  arg4 = *(void **)&jarg4; 
  arg5 = (uint32_t)jarg5; 
  arg6 = *(tiledb_array_schema_t ***)&jarg6; 
  result = (int32_t)tiledb_array_schema_load_with_key(arg1,(char const *)arg2,arg3,(void const *)arg4,arg5,arg6);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1get_1array_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_array_type_t *arg3 = (tiledb_array_type_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = *(tiledb_array_type_t **)&jarg3; 
  result = (int32_t)tiledb_array_schema_get_array_type(arg1,(tiledb_array_schema_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1get_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  uint64_t *arg3 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = *(uint64_t **)&jarg3; 
  result = (int32_t)tiledb_array_schema_get_capacity(arg1,(tiledb_array_schema_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1get_1cell_1order(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_layout_t *arg3 = (tiledb_layout_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = *(tiledb_layout_t **)&jarg3; 
  result = (int32_t)tiledb_array_schema_get_cell_order(arg1,(tiledb_array_schema_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1get_1coords_1filter_1list(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_filter_list_t **arg3 = (tiledb_filter_list_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = *(tiledb_filter_list_t ***)&jarg3; 
  result = (int32_t)tiledb_array_schema_get_coords_filter_list(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1get_1offsets_1filter_1list(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_filter_list_t **arg3 = (tiledb_filter_list_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = *(tiledb_filter_list_t ***)&jarg3; 
  result = (int32_t)tiledb_array_schema_get_offsets_filter_list(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1get_1validity_1filter_1list(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_filter_list_t **arg3 = (tiledb_filter_list_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = *(tiledb_filter_list_t ***)&jarg3; 
  result = (int32_t)tiledb_array_schema_get_validity_filter_list(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1get_1domain(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_domain_t **arg3 = (tiledb_domain_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = *(tiledb_domain_t ***)&jarg3; 
  result = (int32_t)tiledb_array_schema_get_domain(arg1,(tiledb_array_schema_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1get_1tile_1order(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  tiledb_layout_t *arg3 = (tiledb_layout_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = *(tiledb_layout_t **)&jarg3; 
  result = (int32_t)tiledb_array_schema_get_tile_order(arg1,(tiledb_array_schema_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1get_1attribute_1num(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  uint32_t *arg3 = (uint32_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = *(uint32_t **)&jarg3; 
  result = (int32_t)tiledb_array_schema_get_attribute_num(arg1,(tiledb_array_schema_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1get_1attribute_1from_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  uint32_t arg3 ;
  tiledb_attribute_t **arg4 = (tiledb_attribute_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(tiledb_attribute_t ***)&jarg4; 
  result = (int32_t)tiledb_array_schema_get_attribute_from_index(arg1,(tiledb_array_schema_t const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1get_1attribute_1from_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  char *arg3 = (char *) 0 ;
  tiledb_attribute_t **arg4 = (tiledb_attribute_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(tiledb_attribute_t ***)&jarg4; 
  result = (int32_t)tiledb_array_schema_get_attribute_from_name(arg1,(tiledb_array_schema_t const *)arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1has_1attribute(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int32_t *arg4 = (int32_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(int32_t **)&jarg4; 
  result = (int32_t)tiledb_array_schema_has_attribute(arg1,(tiledb_array_schema_t const *)arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  FILE *arg3 = (FILE *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = *(FILE **)&jarg3; 
  result = (int32_t)tiledb_array_schema_dump(arg1,(tiledb_array_schema_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1alloc(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_t *arg2 = (tiledb_array_t *) 0 ;
  tiledb_query_type_t arg3 ;
  tiledb_query_t **arg4 = (tiledb_query_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_t **)&jarg2; 
  arg3 = (tiledb_query_type_t)jarg3; 
  arg4 = *(tiledb_query_t ***)&jarg4; 
  result = (int32_t)tiledb_query_alloc(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1get_1stats(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  char **arg3 = (char **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = *(char ***)&jarg3; 
  result = (int32_t)tiledb_query_get_stats(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1set_1config(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  tiledb_config_t *arg3 = (tiledb_config_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = *(tiledb_config_t **)&jarg3; 
  result = (int32_t)tiledb_query_set_config(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1get_1config(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  tiledb_config_t **arg3 = (tiledb_config_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = *(tiledb_config_t ***)&jarg3; 
  result = (int32_t)tiledb_query_get_config(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1set_1subarray(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  void *arg3 = (void *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  result = (int32_t)tiledb_query_set_subarray(arg1,arg2,(void const *)arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1set_1subarray_1t(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  tiledb_subarray_t *arg3 = (tiledb_subarray_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = *(tiledb_subarray_t **)&jarg3; 
  result = (int32_t)tiledb_query_set_subarray_t(arg1,arg2,(tiledb_subarray_t const *)arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1set_1data_1buffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = (void *) 0 ;
  uint64_t *arg5 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(void **)&jarg4; 
  arg5 = *(uint64_t **)&jarg5; 
  result = (int32_t)tiledb_query_set_data_buffer(arg1,arg2,(char const *)arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1set_1offsets_1buffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  char *arg3 = (char *) 0 ;
  uint64_t *arg4 = (uint64_t *) 0 ;
  uint64_t *arg5 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(uint64_t **)&jarg4; 
  arg5 = *(uint64_t **)&jarg5; 
  result = (int32_t)tiledb_query_set_offsets_buffer(arg1,arg2,(char const *)arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1set_1validity_1buffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  char *arg3 = (char *) 0 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  uint64_t *arg5 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(uint8_t **)&jarg4; 
  arg5 = *(uint64_t **)&jarg5; 
  result = (int32_t)tiledb_query_set_validity_buffer(arg1,arg2,(char const *)arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1get_1data_1buffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  char *arg3 = (char *) 0 ;
  void **arg4 = (void **) 0 ;
  uint64_t **arg5 = (uint64_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(void ***)&jarg4; 
  arg5 = *(uint64_t ***)&jarg5; 
  result = (int32_t)tiledb_query_get_data_buffer(arg1,arg2,(char const *)arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1get_1offsets_1buffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  char *arg3 = (char *) 0 ;
  uint64_t **arg4 = (uint64_t **) 0 ;
  uint64_t **arg5 = (uint64_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(uint64_t ***)&jarg4; 
  arg5 = *(uint64_t ***)&jarg5; 
  result = (int32_t)tiledb_query_get_offsets_buffer(arg1,arg2,(char const *)arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1get_1validity_1buffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  char *arg3 = (char *) 0 ;
  uint8_t **arg4 = (uint8_t **) 0 ;
  uint64_t **arg5 = (uint64_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(uint8_t ***)&jarg4; 
  arg5 = *(uint64_t ***)&jarg5; 
  result = (int32_t)tiledb_query_get_validity_buffer(arg1,arg2,(char const *)arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1set_1layout(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  tiledb_layout_t arg3 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = (tiledb_layout_t)jarg3; 
  result = (int32_t)tiledb_query_set_layout(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1set_1condition(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  tiledb_query_condition_t *arg3 = (tiledb_query_condition_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = *(tiledb_query_condition_t **)&jarg3; 
  result = (int32_t)tiledb_query_set_condition(arg1,arg2,(tiledb_query_condition_t const *)arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1finalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  result = (int32_t)tiledb_query_finalize(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1submit_1and_1finalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  result = (int32_t)tiledb_query_submit_and_finalize(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1free(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_query_t **arg1 = (tiledb_query_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_query_t ***)&jarg1; 
  tiledb_query_free(arg1);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1submit(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  result = (int32_t)tiledb_query_submit(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1submit_1async(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  void (*arg3)(void *) = (void (*)(void *)) 0 ;
  void *arg4 = (void *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = *(void (**)(void *))&jarg3; 
  arg4 = *(void **)&jarg4; 
  result = (int32_t)tiledb_query_submit_async(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1has_1results(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  int32_t *arg3 = (int32_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = *(int32_t **)&jarg3; 
  result = (int32_t)tiledb_query_has_results(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1get_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  tiledb_query_status_t *arg3 = (tiledb_query_status_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = *(tiledb_query_status_t **)&jarg3; 
  result = (int32_t)tiledb_query_get_status(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1get_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  tiledb_query_type_t *arg3 = (tiledb_query_type_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = *(tiledb_query_type_t **)&jarg3; 
  result = (int32_t)tiledb_query_get_type(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1get_1layout(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  tiledb_layout_t *arg3 = (tiledb_layout_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = *(tiledb_layout_t **)&jarg3; 
  result = (int32_t)tiledb_query_get_layout(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1get_1array(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  tiledb_array_t **arg3 = (tiledb_array_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = *(tiledb_array_t ***)&jarg3; 
  result = (int32_t)tiledb_query_get_array(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1add_1range(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  uint32_t arg3 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(void **)&jarg4; 
  arg5 = *(void **)&jarg5; 
  arg6 = *(void **)&jarg6; 
  result = (int32_t)tiledb_query_add_range(arg1,arg2,arg3,(void const *)arg4,(void const *)arg5,(void const *)arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1add_1range_1by_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(void **)&jarg4; 
  arg5 = *(void **)&jarg5; 
  arg6 = *(void **)&jarg6; 
  result = (int32_t)tiledb_query_add_range_by_name(arg1,arg2,(char const *)arg3,(void const *)arg4,(void const *)arg5,(void const *)arg6);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1add_1range_1var(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg5, jlong jarg6, jobject jarg7) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  uint32_t arg3 ;
  void *arg4 = (void *) 0 ;
  uint64_t arg5 ;
  void *arg6 = (void *) 0 ;
  uint64_t arg7 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(void **)&jarg4; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg5);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg5, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg5 = 0;
    if (sz > 0) {
      arg5 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg5 = (arg5 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg6 = *(void **)&jarg6; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg7) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg7);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg7, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg7 = 0;
    if (sz > 0) {
      arg7 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg7 = (arg7 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (int32_t)tiledb_query_add_range_var(arg1,arg2,arg3,(void const *)arg4,arg5,(void const *)arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1add_1range_1var_1by_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jobject jarg5, jlong jarg6, jobject jarg7) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = (void *) 0 ;
  uint64_t arg5 ;
  void *arg6 = (void *) 0 ;
  uint64_t arg7 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(void **)&jarg4; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg5);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg5, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg5 = 0;
    if (sz > 0) {
      arg5 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg5 = (arg5 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg6 = *(void **)&jarg6; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg7) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg7);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg7, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg7 = 0;
    if (sz > 0) {
      arg7 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg7 = (arg7 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (int32_t)tiledb_query_add_range_var_by_name(arg1,arg2,(char const *)arg3,(void const *)arg4,arg5,(void const *)arg6,arg7);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1get_1range_1num(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  uint32_t arg3 ;
  uint64_t *arg4 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(uint64_t **)&jarg4; 
  result = (int32_t)tiledb_query_get_range_num(arg1,(tiledb_query_t const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1get_1range_1num_1from_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  char *arg3 = (char *) 0 ;
  uint64_t *arg4 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(uint64_t **)&jarg4; 
  result = (int32_t)tiledb_query_get_range_num_from_name(arg1,(tiledb_query_t const *)arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1get_1range(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  uint32_t arg3 ;
  uint64_t arg4 ;
  void **arg5 = (void **) 0 ;
  void **arg6 = (void **) 0 ;
  void **arg7 = (void **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = *(void ***)&jarg5; 
  arg6 = *(void ***)&jarg6; 
  arg7 = *(void ***)&jarg7; 
  result = (int32_t)tiledb_query_get_range(arg1,(tiledb_query_t const *)arg2,arg3,arg4,(void const **)arg5,(void const **)arg6,(void const **)arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1get_1range_1from_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jobject jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  char *arg3 = (char *) 0 ;
  uint64_t arg4 ;
  void **arg5 = (void **) 0 ;
  void **arg6 = (void **) 0 ;
  void **arg7 = (void **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = *(void ***)&jarg5; 
  arg6 = *(void ***)&jarg6; 
  arg7 = *(void ***)&jarg7; 
  result = (int32_t)tiledb_query_get_range_from_name(arg1,(tiledb_query_t const *)arg2,(char const *)arg3,arg4,(void const **)arg5,(void const **)arg6,(void const **)arg7);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1get_1range_1var_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  uint32_t arg3 ;
  uint64_t arg4 ;
  uint64_t *arg5 = (uint64_t *) 0 ;
  uint64_t *arg6 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = *(uint64_t **)&jarg5; 
  arg6 = *(uint64_t **)&jarg6; 
  result = (int32_t)tiledb_query_get_range_var_size(arg1,(tiledb_query_t const *)arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1get_1range_1var_1size_1from_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jobject jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  char *arg3 = (char *) 0 ;
  uint64_t arg4 ;
  uint64_t *arg5 = (uint64_t *) 0 ;
  uint64_t *arg6 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = *(uint64_t **)&jarg5; 
  arg6 = *(uint64_t **)&jarg6; 
  result = (int32_t)tiledb_query_get_range_var_size_from_name(arg1,(tiledb_query_t const *)arg2,(char const *)arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1get_1range_1var(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  uint32_t arg3 ;
  uint64_t arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = *(void **)&jarg5; 
  arg6 = *(void **)&jarg6; 
  result = (int32_t)tiledb_query_get_range_var(arg1,(tiledb_query_t const *)arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1get_1range_1var_1from_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jobject jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  char *arg3 = (char *) 0 ;
  uint64_t arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = *(void **)&jarg5; 
  arg6 = *(void **)&jarg6; 
  result = (int32_t)tiledb_query_get_range_var_from_name(arg1,(tiledb_query_t const *)arg2,(char const *)arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1get_1est_1result_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  char *arg3 = (char *) 0 ;
  uint64_t *arg4 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(uint64_t **)&jarg4; 
  result = (int32_t)tiledb_query_get_est_result_size(arg1,(tiledb_query_t const *)arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1get_1est_1result_1size_1var(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  char *arg3 = (char *) 0 ;
  uint64_t *arg4 = (uint64_t *) 0 ;
  uint64_t *arg5 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(uint64_t **)&jarg4; 
  arg5 = *(uint64_t **)&jarg5; 
  result = (int32_t)tiledb_query_get_est_result_size_var(arg1,(tiledb_query_t const *)arg2,(char const *)arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1get_1est_1result_1size_1nullable(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  char *arg3 = (char *) 0 ;
  uint64_t *arg4 = (uint64_t *) 0 ;
  uint64_t *arg5 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(uint64_t **)&jarg4; 
  arg5 = *(uint64_t **)&jarg5; 
  result = (int32_t)tiledb_query_get_est_result_size_nullable(arg1,(tiledb_query_t const *)arg2,(char const *)arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1get_1est_1result_1size_1var_1nullable(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  char *arg3 = (char *) 0 ;
  uint64_t *arg4 = (uint64_t *) 0 ;
  uint64_t *arg5 = (uint64_t *) 0 ;
  uint64_t *arg6 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(uint64_t **)&jarg4; 
  arg5 = *(uint64_t **)&jarg5; 
  arg6 = *(uint64_t **)&jarg6; 
  result = (int32_t)tiledb_query_get_est_result_size_var_nullable(arg1,(tiledb_query_t const *)arg2,(char const *)arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1get_1fragment_1num(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  uint32_t *arg3 = (uint32_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = *(uint32_t **)&jarg3; 
  result = (int32_t)tiledb_query_get_fragment_num(arg1,(tiledb_query_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1get_1fragment_1uri(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  uint64_t arg3 ;
  char **arg4 = (char **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg4 = *(char ***)&jarg4; 
  result = (int32_t)tiledb_query_get_fragment_uri(arg1,(tiledb_query_t const *)arg2,arg3,(char const **)arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1get_1fragment_1timestamp_1range(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  uint64_t arg3 ;
  uint64_t *arg4 = (uint64_t *) 0 ;
  uint64_t *arg5 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg4 = *(uint64_t **)&jarg4; 
  arg5 = *(uint64_t **)&jarg5; 
  result = (int32_t)tiledb_query_get_fragment_timestamp_range(arg1,(tiledb_query_t const *)arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1get_1subarray_1t(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  tiledb_subarray_t **arg3 = (tiledb_subarray_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = *(tiledb_subarray_t ***)&jarg3; 
  result = (int32_t)tiledb_query_get_subarray_t(arg1,(tiledb_query_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1condition_1alloc(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_condition_t **arg2 = (tiledb_query_condition_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_condition_t ***)&jarg2; 
  result = (int32_t)tiledb_query_condition_alloc(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1condition_1free(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_query_condition_t **arg1 = (tiledb_query_condition_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_query_condition_t ***)&jarg1; 
  tiledb_query_condition_free(arg1);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1condition_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jobject jarg5, jint jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_condition_t *arg2 = (tiledb_query_condition_t *) 0 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = (void *) 0 ;
  uint64_t arg5 ;
  tiledb_query_condition_op_t arg6 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_condition_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(void **)&jarg4; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg5);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg5, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg5 = 0;
    if (sz > 0) {
      arg5 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg5 = (arg5 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg6 = (tiledb_query_condition_op_t)jarg6; 
  result = (int32_t)tiledb_query_condition_init(arg1,arg2,(char const *)arg3,(void const *)arg4,arg5,arg6);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1condition_1combine(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jlong jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_condition_t *arg2 = (tiledb_query_condition_t *) 0 ;
  tiledb_query_condition_t *arg3 = (tiledb_query_condition_t *) 0 ;
  tiledb_query_condition_combination_op_t arg4 ;
  tiledb_query_condition_t **arg5 = (tiledb_query_condition_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_condition_t **)&jarg2; 
  arg3 = *(tiledb_query_condition_t **)&jarg3; 
  arg4 = (tiledb_query_condition_combination_op_t)jarg4; 
  arg5 = *(tiledb_query_condition_t ***)&jarg5; 
  result = (int32_t)tiledb_query_condition_combine(arg1,(tiledb_query_condition_t const *)arg2,(tiledb_query_condition_t const *)arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1subarray_1alloc(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_t *arg2 = (tiledb_array_t *) 0 ;
  tiledb_subarray_t **arg3 = (tiledb_subarray_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_t **)&jarg2; 
  arg3 = *(tiledb_subarray_t ***)&jarg3; 
  result = (int32_t)tiledb_subarray_alloc(arg1,(tiledb_array_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1subarray_1set_1config(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_subarray_t *arg2 = (tiledb_subarray_t *) 0 ;
  tiledb_config_t *arg3 = (tiledb_config_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_subarray_t **)&jarg2; 
  arg3 = *(tiledb_config_t **)&jarg3; 
  result = (int32_t)tiledb_subarray_set_config(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1subarray_1free(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_subarray_t **arg1 = (tiledb_subarray_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_subarray_t ***)&jarg1; 
  tiledb_subarray_free(arg1);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1subarray_1set_1coalesce_1ranges(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_subarray_t *arg2 = (tiledb_subarray_t *) 0 ;
  int arg3 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_subarray_t **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int32_t)tiledb_subarray_set_coalesce_ranges(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1subarray_1set_1subarray(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_subarray_t *arg2 = (tiledb_subarray_t *) 0 ;
  void *arg3 = (void *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_subarray_t **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  result = (int32_t)tiledb_subarray_set_subarray(arg1,arg2,(void const *)arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1subarray_1add_1range(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_subarray_t *arg2 = (tiledb_subarray_t *) 0 ;
  uint32_t arg3 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_subarray_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(void **)&jarg4; 
  arg5 = *(void **)&jarg5; 
  arg6 = *(void **)&jarg6; 
  result = (int32_t)tiledb_subarray_add_range(arg1,arg2,arg3,(void const *)arg4,(void const *)arg5,(void const *)arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1subarray_1add_1range_1by_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_subarray_t *arg2 = (tiledb_subarray_t *) 0 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_subarray_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(void **)&jarg4; 
  arg5 = *(void **)&jarg5; 
  arg6 = *(void **)&jarg6; 
  result = (int32_t)tiledb_subarray_add_range_by_name(arg1,arg2,(char const *)arg3,(void const *)arg4,(void const *)arg5,(void const *)arg6);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1subarray_1add_1range_1var(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg5, jlong jarg6, jobject jarg7) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_subarray_t *arg2 = (tiledb_subarray_t *) 0 ;
  uint32_t arg3 ;
  void *arg4 = (void *) 0 ;
  uint64_t arg5 ;
  void *arg6 = (void *) 0 ;
  uint64_t arg7 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_subarray_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(void **)&jarg4; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg5);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg5, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg5 = 0;
    if (sz > 0) {
      arg5 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg5 = (arg5 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg6 = *(void **)&jarg6; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg7) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg7);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg7, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg7 = 0;
    if (sz > 0) {
      arg7 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg7 = (arg7 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (int32_t)tiledb_subarray_add_range_var(arg1,arg2,arg3,(void const *)arg4,arg5,(void const *)arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1subarray_1add_1range_1var_1by_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jobject jarg5, jlong jarg6, jobject jarg7) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_subarray_t *arg2 = (tiledb_subarray_t *) 0 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = (void *) 0 ;
  uint64_t arg5 ;
  void *arg6 = (void *) 0 ;
  uint64_t arg7 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_subarray_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(void **)&jarg4; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg5);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg5, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg5 = 0;
    if (sz > 0) {
      arg5 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg5 = (arg5 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg6 = *(void **)&jarg6; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg7) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg7);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg7, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg7 = 0;
    if (sz > 0) {
      arg7 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg7 = (arg7 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (int32_t)tiledb_subarray_add_range_var_by_name(arg1,arg2,(char const *)arg3,(void const *)arg4,arg5,(void const *)arg6,arg7);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1subarray_1get_1range_1num(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_subarray_t *arg2 = (tiledb_subarray_t *) 0 ;
  uint32_t arg3 ;
  uint64_t *arg4 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_subarray_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(uint64_t **)&jarg4; 
  result = (int32_t)tiledb_subarray_get_range_num(arg1,(tiledb_subarray_t const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1subarray_1get_1range_1num_1from_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_subarray_t *arg2 = (tiledb_subarray_t *) 0 ;
  char *arg3 = (char *) 0 ;
  uint64_t *arg4 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_subarray_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(uint64_t **)&jarg4; 
  result = (int32_t)tiledb_subarray_get_range_num_from_name(arg1,(tiledb_subarray_t const *)arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1subarray_1get_1range(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_subarray_t *arg2 = (tiledb_subarray_t *) 0 ;
  uint32_t arg3 ;
  uint64_t arg4 ;
  void **arg5 = (void **) 0 ;
  void **arg6 = (void **) 0 ;
  void **arg7 = (void **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_subarray_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = *(void ***)&jarg5; 
  arg6 = *(void ***)&jarg6; 
  arg7 = *(void ***)&jarg7; 
  result = (int32_t)tiledb_subarray_get_range(arg1,(tiledb_subarray_t const *)arg2,arg3,arg4,(void const **)arg5,(void const **)arg6,(void const **)arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1subarray_1get_1range_1from_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jobject jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_subarray_t *arg2 = (tiledb_subarray_t *) 0 ;
  char *arg3 = (char *) 0 ;
  uint64_t arg4 ;
  void **arg5 = (void **) 0 ;
  void **arg6 = (void **) 0 ;
  void **arg7 = (void **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_subarray_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = *(void ***)&jarg5; 
  arg6 = *(void ***)&jarg6; 
  arg7 = *(void ***)&jarg7; 
  result = (int32_t)tiledb_subarray_get_range_from_name(arg1,(tiledb_subarray_t const *)arg2,(char const *)arg3,arg4,(void const **)arg5,(void const **)arg6,(void const **)arg7);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1subarray_1get_1range_1var_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_subarray_t *arg2 = (tiledb_subarray_t *) 0 ;
  uint32_t arg3 ;
  uint64_t arg4 ;
  uint64_t *arg5 = (uint64_t *) 0 ;
  uint64_t *arg6 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_subarray_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = *(uint64_t **)&jarg5; 
  arg6 = *(uint64_t **)&jarg6; 
  result = (int32_t)tiledb_subarray_get_range_var_size(arg1,(tiledb_subarray_t const *)arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1subarray_1get_1range_1var_1size_1from_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jobject jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_subarray_t *arg2 = (tiledb_subarray_t *) 0 ;
  char *arg3 = (char *) 0 ;
  uint64_t arg4 ;
  uint64_t *arg5 = (uint64_t *) 0 ;
  uint64_t *arg6 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_subarray_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = *(uint64_t **)&jarg5; 
  arg6 = *(uint64_t **)&jarg6; 
  result = (int32_t)tiledb_subarray_get_range_var_size_from_name(arg1,(tiledb_subarray_t const *)arg2,(char const *)arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1subarray_1get_1range_1var(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_subarray_t *arg2 = (tiledb_subarray_t *) 0 ;
  uint32_t arg3 ;
  uint64_t arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_subarray_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = *(void **)&jarg5; 
  arg6 = *(void **)&jarg6; 
  result = (int32_t)tiledb_subarray_get_range_var(arg1,(tiledb_subarray_t const *)arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1subarray_1get_1range_1var_1from_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jobject jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_subarray_t *arg2 = (tiledb_subarray_t *) 0 ;
  char *arg3 = (char *) 0 ;
  uint64_t arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_subarray_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = *(void **)&jarg5; 
  arg6 = *(void **)&jarg6; 
  result = (int32_t)tiledb_subarray_get_range_var_from_name(arg1,(tiledb_subarray_t const *)arg2,(char const *)arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1alloc(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_array_t **arg3 = (tiledb_array_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(tiledb_array_t ***)&jarg3; 
  result = (int32_t)tiledb_array_alloc(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1set_1open_1timestamp_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_t *arg2 = (tiledb_array_t *) 0 ;
  uint64_t arg3 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_t **)&jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (int32_t)tiledb_array_set_open_timestamp_start(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1set_1open_1timestamp_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_t *arg2 = (tiledb_array_t *) 0 ;
  uint64_t arg3 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_t **)&jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (int32_t)tiledb_array_set_open_timestamp_end(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1get_1open_1timestamp_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_t *arg2 = (tiledb_array_t *) 0 ;
  uint64_t *arg3 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_t **)&jarg2; 
  arg3 = *(uint64_t **)&jarg3; 
  result = (int32_t)tiledb_array_get_open_timestamp_start(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1get_1open_1timestamp_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_t *arg2 = (tiledb_array_t *) 0 ;
  uint64_t *arg3 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_t **)&jarg2; 
  arg3 = *(uint64_t **)&jarg3; 
  result = (int32_t)tiledb_array_get_open_timestamp_end(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1delete_1fragments(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jobject jarg4, jobject jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_t *arg2 = (tiledb_array_t *) 0 ;
  char *arg3 = (char *) 0 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg5);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg5, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg5 = 0;
    if (sz > 0) {
      arg5 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg5 = (arg5 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (int32_t)tiledb_array_delete_fragments(arg1,arg2,(char const *)arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1delete_1fragments_1list(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 ;
  size_t arg4 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(char ***)&jarg3; 
  arg4 = (size_t)jarg4; 
  result = (int32_t)tiledb_array_delete_fragments_list(arg1,(char const *)arg2,(char const *(*))arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_t *arg2 = (tiledb_array_t *) 0 ;
  tiledb_query_type_t arg3 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_t **)&jarg2; 
  arg3 = (tiledb_query_type_t)jarg3; 
  result = (int32_t)tiledb_array_open(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1is_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_t *arg2 = (tiledb_array_t *) 0 ;
  int32_t *arg3 = (int32_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_t **)&jarg2; 
  arg3 = *(int32_t **)&jarg3; 
  result = (int32_t)tiledb_array_is_open(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1reopen(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_t *arg2 = (tiledb_array_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_t **)&jarg2; 
  result = (int32_t)tiledb_array_reopen(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1set_1config(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_t *arg2 = (tiledb_array_t *) 0 ;
  tiledb_config_t *arg3 = (tiledb_config_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_t **)&jarg2; 
  arg3 = *(tiledb_config_t **)&jarg3; 
  result = (int32_t)tiledb_array_set_config(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1get_1config(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_t *arg2 = (tiledb_array_t *) 0 ;
  tiledb_config_t **arg3 = (tiledb_config_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_t **)&jarg2; 
  arg3 = *(tiledb_config_t ***)&jarg3; 
  result = (int32_t)tiledb_array_get_config(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_t *arg2 = (tiledb_array_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_t **)&jarg2; 
  result = (int32_t)tiledb_array_close(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1free(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_array_t **arg1 = (tiledb_array_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_array_t ***)&jarg1; 
  tiledb_array_free(arg1);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1get_1schema(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_t *arg2 = (tiledb_array_t *) 0 ;
  tiledb_array_schema_t **arg3 = (tiledb_array_schema_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_t **)&jarg2; 
  arg3 = *(tiledb_array_schema_t ***)&jarg3; 
  result = (int32_t)tiledb_array_get_schema(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1get_1query_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_t *arg2 = (tiledb_array_t *) 0 ;
  tiledb_query_type_t *arg3 = (tiledb_query_type_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_t **)&jarg2; 
  arg3 = *(tiledb_query_type_t **)&jarg3; 
  result = (int32_t)tiledb_array_get_query_type(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_array_schema_t *arg3 = (tiledb_array_schema_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(tiledb_array_schema_t **)&jarg3; 
  result = (int32_t)tiledb_array_create(arg1,(char const *)arg2,(tiledb_array_schema_t const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1create_1with_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jint jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_array_schema_t *arg3 = (tiledb_array_schema_t *) 0 ;
  tiledb_encryption_type_t arg4 ;
  void *arg5 = (void *) 0 ;
  uint32_t arg6 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(tiledb_array_schema_t **)&jarg3; 
  arg4 = (tiledb_encryption_type_t)jarg4; 
  arg5 = *(void **)&jarg5; 
  arg6 = (uint32_t)jarg6; 
  result = (int32_t)tiledb_array_create_with_key(arg1,(char const *)arg2,(tiledb_array_schema_t const *)arg3,arg4,(void const *)arg5,arg6);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1consolidate(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_config_t *arg3 = (tiledb_config_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(tiledb_config_t **)&jarg3; 
  result = (int32_t)tiledb_array_consolidate(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1consolidate_1with_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_encryption_type_t arg3 ;
  void *arg4 = (void *) 0 ;
  uint32_t arg5 ;
  tiledb_config_t *arg6 = (tiledb_config_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (tiledb_encryption_type_t)jarg3; 
  arg4 = *(void **)&jarg4; 
  arg5 = (uint32_t)jarg5; 
  arg6 = *(tiledb_config_t **)&jarg6; 
  result = (int32_t)tiledb_array_consolidate_with_key(arg1,(char const *)arg2,arg3,(void const *)arg4,arg5,arg6);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1vacuum(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_config_t *arg3 = (tiledb_config_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(tiledb_config_t **)&jarg3; 
  result = (int32_t)tiledb_array_vacuum(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1get_1non_1empty_1domain(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_t *arg2 = (tiledb_array_t *) 0 ;
  void *arg3 = (void *) 0 ;
  int32_t *arg4 = (int32_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_t **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = *(int32_t **)&jarg4; 
  result = (int32_t)tiledb_array_get_non_empty_domain(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1get_1non_1empty_1domain_1from_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_t *arg2 = (tiledb_array_t *) 0 ;
  uint32_t arg3 ;
  void *arg4 = (void *) 0 ;
  int32_t *arg5 = (int32_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(void **)&jarg4; 
  arg5 = *(int32_t **)&jarg5; 
  result = (int32_t)tiledb_array_get_non_empty_domain_from_index(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1get_1non_1empty_1domain_1from_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_t *arg2 = (tiledb_array_t *) 0 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = (void *) 0 ;
  int32_t *arg5 = (int32_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(void **)&jarg4; 
  arg5 = *(int32_t **)&jarg5; 
  result = (int32_t)tiledb_array_get_non_empty_domain_from_name(arg1,arg2,(char const *)arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1get_1non_1empty_1domain_1var_1size_1from_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_t *arg2 = (tiledb_array_t *) 0 ;
  uint32_t arg3 ;
  uint64_t *arg4 = (uint64_t *) 0 ;
  uint64_t *arg5 = (uint64_t *) 0 ;
  int32_t *arg6 = (int32_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(uint64_t **)&jarg4; 
  arg5 = *(uint64_t **)&jarg5; 
  arg6 = *(int32_t **)&jarg6; 
  result = (int32_t)tiledb_array_get_non_empty_domain_var_size_from_index(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1get_1non_1empty_1domain_1var_1size_1from_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_t *arg2 = (tiledb_array_t *) 0 ;
  char *arg3 = (char *) 0 ;
  uint64_t *arg4 = (uint64_t *) 0 ;
  uint64_t *arg5 = (uint64_t *) 0 ;
  int32_t *arg6 = (int32_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(uint64_t **)&jarg4; 
  arg5 = *(uint64_t **)&jarg5; 
  arg6 = *(int32_t **)&jarg6; 
  result = (int32_t)tiledb_array_get_non_empty_domain_var_size_from_name(arg1,arg2,(char const *)arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1get_1non_1empty_1domain_1var_1from_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_t *arg2 = (tiledb_array_t *) 0 ;
  uint32_t arg3 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  int32_t *arg6 = (int32_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(void **)&jarg4; 
  arg5 = *(void **)&jarg5; 
  arg6 = *(int32_t **)&jarg6; 
  result = (int32_t)tiledb_array_get_non_empty_domain_var_from_index(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1get_1non_1empty_1domain_1var_1from_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_t *arg2 = (tiledb_array_t *) 0 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  int32_t *arg6 = (int32_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(void **)&jarg4; 
  arg5 = *(void **)&jarg5; 
  arg6 = *(int32_t **)&jarg6; 
  result = (int32_t)tiledb_array_get_non_empty_domain_var_from_name(arg1,arg2,(char const *)arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1get_1uri(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_t *arg2 = (tiledb_array_t *) 0 ;
  char **arg3 = (char **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_t **)&jarg2; 
  arg3 = *(char ***)&jarg3; 
  result = (int32_t)tiledb_array_get_uri(arg1,arg2,(char const **)arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1encryption_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_encryption_type_t *arg3 = (tiledb_encryption_type_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(tiledb_encryption_type_t **)&jarg3; 
  result = (int32_t)tiledb_array_encryption_type(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1put_1metadata(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jint jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_t *arg2 = (tiledb_array_t *) 0 ;
  char *arg3 = (char *) 0 ;
  tiledb_datatype_t arg4 ;
  uint32_t arg5 ;
  void *arg6 = (void *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (tiledb_datatype_t)jarg4; 
  arg5 = (uint32_t)jarg5; 
  arg6 = *(void **)&jarg6; 
  result = (int32_t)tiledb_array_put_metadata(arg1,arg2,(char const *)arg3,arg4,arg5,(void const *)arg6);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1delete_1metadata(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_t *arg2 = (tiledb_array_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int32_t)tiledb_array_delete_metadata(arg1,arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1get_1metadata(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_t *arg2 = (tiledb_array_t *) 0 ;
  char *arg3 = (char *) 0 ;
  tiledb_datatype_t *arg4 = (tiledb_datatype_t *) 0 ;
  uint32_t *arg5 = (uint32_t *) 0 ;
  void **arg6 = (void **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(tiledb_datatype_t **)&jarg4; 
  arg5 = *(uint32_t **)&jarg5; 
  arg6 = *(void ***)&jarg6; 
  result = (int32_t)tiledb_array_get_metadata(arg1,arg2,(char const *)arg3,arg4,arg5,(void const **)arg6);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1get_1metadata_1num(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_t *arg2 = (tiledb_array_t *) 0 ;
  uint64_t *arg3 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_t **)&jarg2; 
  arg3 = *(uint64_t **)&jarg3; 
  result = (int32_t)tiledb_array_get_metadata_num(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1get_1metadata_1from_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_t *arg2 = (tiledb_array_t *) 0 ;
  uint64_t arg3 ;
  char **arg4 = (char **) 0 ;
  uint32_t *arg5 = (uint32_t *) 0 ;
  tiledb_datatype_t *arg6 = (tiledb_datatype_t *) 0 ;
  uint32_t *arg7 = (uint32_t *) 0 ;
  void **arg8 = (void **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_t **)&jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg4 = *(char ***)&jarg4; 
  arg5 = *(uint32_t **)&jarg5; 
  arg6 = *(tiledb_datatype_t **)&jarg6; 
  arg7 = *(uint32_t **)&jarg7; 
  arg8 = *(void ***)&jarg8; 
  result = (int32_t)tiledb_array_get_metadata_from_index(arg1,arg2,arg3,(char const **)arg4,arg5,arg6,arg7,(void const **)arg8);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1has_1metadata_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_t *arg2 = (tiledb_array_t *) 0 ;
  char *arg3 = (char *) 0 ;
  tiledb_datatype_t *arg4 = (tiledb_datatype_t *) 0 ;
  int32_t *arg5 = (int32_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(tiledb_datatype_t **)&jarg4; 
  arg5 = *(int32_t **)&jarg5; 
  result = (int32_t)tiledb_array_has_metadata_key(arg1,arg2,(char const *)arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1object_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_object_t *arg3 = (tiledb_object_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(tiledb_object_t **)&jarg3; 
  result = (int32_t)tiledb_object_type(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1object_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int32_t)tiledb_object_remove(arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1object_1move(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int32_t)tiledb_object_move(arg1,(char const *)arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1object_1walk(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_walk_order_t arg3 ;
  int32_t (*arg4)(char const *,tiledb_object_t,void *) = (int32_t (*)(char const *,tiledb_object_t,void *)) 0 ;
  void *arg5 = (void *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (tiledb_walk_order_t)jarg3; 
  arg4 = *(int32_t (**)(char const *,tiledb_object_t,void *))&jarg4; 
  arg5 = *(void **)&jarg5; 
  result = (int32_t)tiledb_object_walk(arg1,(char const *)arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1object_1ls(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  int32_t (*arg3)(char const *,tiledb_object_t,void *) = (int32_t (*)(char const *,tiledb_object_t,void *)) 0 ;
  void *arg4 = (void *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(int32_t (**)(char const *,tiledb_object_t,void *))&jarg3; 
  arg4 = *(void **)&jarg4; 
  result = (int32_t)tiledb_object_ls(arg1,(char const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1uri_1to_1path(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uint32_t *arg4 = (uint32_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(uint32_t **)&jarg4; 
  result = (int32_t)tiledb_uri_to_path(arg1,(char const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1stats_1enable(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (int32_t)tiledb_stats_enable();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1stats_1disable(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (int32_t)tiledb_stats_disable();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1stats_1reset(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (int32_t)tiledb_stats_reset();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1stats_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  result = (int32_t)tiledb_stats_dump(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1stats_1dump_1str(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  char **arg1 = (char **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char ***)&jarg1; 
  result = (int32_t)tiledb_stats_dump_str(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1stats_1raw_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  result = (int32_t)tiledb_stats_raw_dump(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1stats_1raw_1dump_1str(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  char **arg1 = (char **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char ***)&jarg1; 
  result = (int32_t)tiledb_stats_raw_dump_str(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1stats_1free_1str(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  char **arg1 = (char **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char ***)&jarg1; 
  result = (int32_t)tiledb_stats_free_str(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1heap_1profiler_1enable(JNIEnv *jenv, jclass jcls, jstring jarg1, jobject jarg2, jobject jarg3, jobject jarg4) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  uint64_t arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (int32_t)tiledb_heap_profiler_enable((char const *)arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1alloc(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_fragment_info_t **arg3 = (tiledb_fragment_info_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(tiledb_fragment_info_t ***)&jarg3; 
  result = (int32_t)tiledb_fragment_info_alloc(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1free(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_fragment_info_t **arg1 = (tiledb_fragment_info_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_fragment_info_t ***)&jarg1; 
  tiledb_fragment_info_free(arg1);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1set_1config(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  tiledb_config_t *arg3 = (tiledb_config_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  arg3 = *(tiledb_config_t **)&jarg3; 
  result = (int32_t)tiledb_fragment_info_set_config(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1get_1config(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  tiledb_config_t **arg3 = (tiledb_config_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  arg3 = *(tiledb_config_t ***)&jarg3; 
  result = (int32_t)tiledb_fragment_info_get_config(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1load(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  result = (int32_t)tiledb_fragment_info_load(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1get_1fragment_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  uint32_t arg3 ;
  char **arg4 = (char **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(char ***)&jarg4; 
  result = (int32_t)tiledb_fragment_info_get_fragment_name(arg1,arg2,arg3,(char const **)arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1get_1fragment_1name_1v2(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  uint32_t arg3 ;
  tiledb_string_t **arg4 = (tiledb_string_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(tiledb_string_t ***)&jarg4; 
  result = (int32_t)tiledb_fragment_info_get_fragment_name_v2(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1get_1fragment_1num(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  uint32_t *arg3 = (uint32_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  arg3 = *(uint32_t **)&jarg3; 
  result = (int32_t)tiledb_fragment_info_get_fragment_num(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1get_1fragment_1uri(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  uint32_t arg3 ;
  char **arg4 = (char **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(char ***)&jarg4; 
  result = (int32_t)tiledb_fragment_info_get_fragment_uri(arg1,arg2,arg3,(char const **)arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1get_1fragment_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  uint32_t arg3 ;
  uint64_t *arg4 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(uint64_t **)&jarg4; 
  result = (int32_t)tiledb_fragment_info_get_fragment_size(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1get_1dense(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  uint32_t arg3 ;
  int32_t *arg4 = (int32_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(int32_t **)&jarg4; 
  result = (int32_t)tiledb_fragment_info_get_dense(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1get_1sparse(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  uint32_t arg3 ;
  int32_t *arg4 = (int32_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(int32_t **)&jarg4; 
  result = (int32_t)tiledb_fragment_info_get_sparse(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1get_1timestamp_1range(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  uint32_t arg3 ;
  uint64_t *arg4 = (uint64_t *) 0 ;
  uint64_t *arg5 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(uint64_t **)&jarg4; 
  arg5 = *(uint64_t **)&jarg5; 
  result = (int32_t)tiledb_fragment_info_get_timestamp_range(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1get_1non_1empty_1domain_1from_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  void *arg5 = (void *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = (uint32_t)jarg4; 
  arg5 = *(void **)&jarg5; 
  result = (int32_t)tiledb_fragment_info_get_non_empty_domain_from_index(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1get_1non_1empty_1domain_1from_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4, jlong jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  uint32_t arg3 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = (void *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = *(void **)&jarg5; 
  result = (int32_t)tiledb_fragment_info_get_non_empty_domain_from_name(arg1,arg2,arg3,(char const *)arg4,arg5);
  jresult = (jint)result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1get_1non_1empty_1domain_1var_1size_1from_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  uint64_t *arg5 = (uint64_t *) 0 ;
  uint64_t *arg6 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = (uint32_t)jarg4; 
  arg5 = *(uint64_t **)&jarg5; 
  arg6 = *(uint64_t **)&jarg6; 
  result = (int32_t)tiledb_fragment_info_get_non_empty_domain_var_size_from_index(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1get_1non_1empty_1domain_1var_1size_1from_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  uint32_t arg3 ;
  char *arg4 = (char *) 0 ;
  uint64_t *arg5 = (uint64_t *) 0 ;
  uint64_t *arg6 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = *(uint64_t **)&jarg5; 
  arg6 = *(uint64_t **)&jarg6; 
  result = (int32_t)tiledb_fragment_info_get_non_empty_domain_var_size_from_name(arg1,arg2,arg3,(char const *)arg4,arg5,arg6);
  jresult = (jint)result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1get_1non_1empty_1domain_1var_1from_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = (uint32_t)jarg4; 
  arg5 = *(void **)&jarg5; 
  arg6 = *(void **)&jarg6; 
  result = (int32_t)tiledb_fragment_info_get_non_empty_domain_var_from_index(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1get_1non_1empty_1domain_1var_1from_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  uint32_t arg3 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = *(void **)&jarg5; 
  arg6 = *(void **)&jarg6; 
  result = (int32_t)tiledb_fragment_info_get_non_empty_domain_var_from_name(arg1,arg2,arg3,(char const *)arg4,arg5,arg6);
  jresult = (jint)result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1get_1mbr_1num(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  uint32_t arg3 ;
  uint64_t *arg4 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(uint64_t **)&jarg4; 
  result = (int32_t)tiledb_fragment_info_get_mbr_num(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1get_1mbr_1from_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  uint32_t arg5 ;
  void *arg6 = (void *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = (uint32_t)jarg4; 
  arg5 = (uint32_t)jarg5; 
  arg6 = *(void **)&jarg6; 
  result = (int32_t)tiledb_fragment_info_get_mbr_from_index(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1get_1mbr_1from_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jstring jarg5, jlong jarg6) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  char *arg5 = (char *) 0 ;
  void *arg6 = (void *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = (uint32_t)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = *(void **)&jarg6; 
  result = (int32_t)tiledb_fragment_info_get_mbr_from_name(arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  jresult = (jint)result; 
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1get_1mbr_1var_1size_1from_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  uint32_t arg5 ;
  uint64_t *arg6 = (uint64_t *) 0 ;
  uint64_t *arg7 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = (uint32_t)jarg4; 
  arg5 = (uint32_t)jarg5; 
  arg6 = *(uint64_t **)&jarg6; 
  arg7 = *(uint64_t **)&jarg7; 
  result = (int32_t)tiledb_fragment_info_get_mbr_var_size_from_index(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1get_1mbr_1var_1size_1from_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jstring jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  char *arg5 = (char *) 0 ;
  uint64_t *arg6 = (uint64_t *) 0 ;
  uint64_t *arg7 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = (uint32_t)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = *(uint64_t **)&jarg6; 
  arg7 = *(uint64_t **)&jarg7; 
  result = (int32_t)tiledb_fragment_info_get_mbr_var_size_from_name(arg1,arg2,arg3,arg4,(char const *)arg5,arg6,arg7);
  jresult = (jint)result; 
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1get_1mbr_1var_1from_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  uint32_t arg5 ;
  void *arg6 = (void *) 0 ;
  void *arg7 = (void *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = (uint32_t)jarg4; 
  arg5 = (uint32_t)jarg5; 
  arg6 = *(void **)&jarg6; 
  arg7 = *(void **)&jarg7; 
  result = (int32_t)tiledb_fragment_info_get_mbr_var_from_index(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1get_1mbr_1var_1from_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jstring jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  char *arg5 = (char *) 0 ;
  void *arg6 = (void *) 0 ;
  void *arg7 = (void *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = (uint32_t)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = *(void **)&jarg6; 
  arg7 = *(void **)&jarg7; 
  result = (int32_t)tiledb_fragment_info_get_mbr_var_from_name(arg1,arg2,arg3,arg4,(char const *)arg5,arg6,arg7);
  jresult = (jint)result; 
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1get_1cell_1num(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  uint32_t arg3 ;
  uint64_t *arg4 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(uint64_t **)&jarg4; 
  result = (int32_t)tiledb_fragment_info_get_cell_num(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1get_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  uint32_t arg3 ;
  uint32_t *arg4 = (uint32_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(uint32_t **)&jarg4; 
  result = (int32_t)tiledb_fragment_info_get_version(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1has_1consolidated_1metadata(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  uint32_t arg3 ;
  int32_t *arg4 = (int32_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(int32_t **)&jarg4; 
  result = (int32_t)tiledb_fragment_info_has_consolidated_metadata(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1get_1unconsolidated_1metadata_1num(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  uint32_t *arg3 = (uint32_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  arg3 = *(uint32_t **)&jarg3; 
  result = (int32_t)tiledb_fragment_info_get_unconsolidated_metadata_num(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1get_1to_1vacuum_1num(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  uint32_t *arg3 = (uint32_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  arg3 = *(uint32_t **)&jarg3; 
  result = (int32_t)tiledb_fragment_info_get_to_vacuum_num(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1get_1to_1vacuum_1uri(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  uint32_t arg3 ;
  char **arg4 = (char **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(char ***)&jarg4; 
  result = (int32_t)tiledb_fragment_info_get_to_vacuum_uri(arg1,arg2,arg3,(char const **)arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1get_1array_1schema(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  uint32_t arg3 ;
  tiledb_array_schema_t **arg4 = (tiledb_array_schema_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(tiledb_array_schema_t ***)&jarg4; 
  result = (int32_t)tiledb_fragment_info_get_array_schema(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1get_1array_1schema_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  uint32_t arg3 ;
  char **arg4 = (char **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(char ***)&jarg4; 
  result = (int32_t)tiledb_fragment_info_get_array_schema_name(arg1,arg2,arg3,(char const **)arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  FILE *arg3 = (FILE *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  arg3 = *(FILE **)&jarg3; 
  result = (int32_t)tiledb_fragment_info_dump(arg1,(tiledb_fragment_info_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1group_1alloc(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_group_t **arg3 = (tiledb_group_t **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(tiledb_group_t ***)&jarg3; 
  result = tiledb_group_alloc(arg1,(char const *)arg2,arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1group_1free(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_group_t **arg1 = (tiledb_group_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_group_t ***)&jarg1; 
  tiledb_group_free(arg1);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1group_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_group_t *arg2 = (tiledb_group_t *) 0 ;
  tiledb_query_type_t arg3 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_group_t **)&jarg2; 
  arg3 = (tiledb_query_type_t)jarg3; 
  result = tiledb_group_open(arg1,arg2,arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1group_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_group_t *arg2 = (tiledb_group_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_group_t **)&jarg2; 
  result = tiledb_group_close(arg1,arg2);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1group_1set_1config(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_group_t *arg2 = (tiledb_group_t *) 0 ;
  tiledb_config_t *arg3 = (tiledb_config_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_group_t **)&jarg2; 
  arg3 = *(tiledb_config_t **)&jarg3; 
  result = tiledb_group_set_config(arg1,arg2,arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1group_1get_1config(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_group_t *arg2 = (tiledb_group_t *) 0 ;
  tiledb_config_t **arg3 = (tiledb_config_t **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_group_t **)&jarg2; 
  arg3 = *(tiledb_config_t ***)&jarg3; 
  result = tiledb_group_get_config(arg1,arg2,arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1group_1put_1metadata(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jint jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_group_t *arg2 = (tiledb_group_t *) 0 ;
  char *arg3 = (char *) 0 ;
  tiledb_datatype_t arg4 ;
  uint32_t arg5 ;
  void *arg6 = (void *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_group_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (tiledb_datatype_t)jarg4; 
  arg5 = (uint32_t)jarg5; 
  arg6 = *(void **)&jarg6; 
  result = tiledb_group_put_metadata(arg1,arg2,(char const *)arg3,arg4,arg5,(void const *)arg6);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1group_1delete_1group(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jshort jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_group_t *arg2 = (tiledb_group_t *) 0 ;
  char *arg3 = (char *) 0 ;
  uint8_t arg4 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_group_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (uint8_t)jarg4; 
  result = (int32_t)tiledb_group_delete_group(arg1,arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1group_1delete_1metadata(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_group_t *arg2 = (tiledb_group_t *) 0 ;
  char *arg3 = (char *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_group_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = tiledb_group_delete_metadata(arg1,arg2,(char const *)arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1group_1get_1metadata(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_group_t *arg2 = (tiledb_group_t *) 0 ;
  char *arg3 = (char *) 0 ;
  tiledb_datatype_t *arg4 = (tiledb_datatype_t *) 0 ;
  uint32_t *arg5 = (uint32_t *) 0 ;
  void **arg6 = (void **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_group_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(tiledb_datatype_t **)&jarg4; 
  arg5 = *(uint32_t **)&jarg5; 
  arg6 = *(void ***)&jarg6; 
  result = tiledb_group_get_metadata(arg1,arg2,(char const *)arg3,arg4,arg5,(void const **)arg6);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1group_1get_1metadata_1num(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_group_t *arg2 = (tiledb_group_t *) 0 ;
  uint64_t *arg3 = (uint64_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_group_t **)&jarg2; 
  arg3 = *(uint64_t **)&jarg3; 
  result = tiledb_group_get_metadata_num(arg1,arg2,arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1group_1get_1metadata_1from_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_group_t *arg2 = (tiledb_group_t *) 0 ;
  uint64_t arg3 ;
  char **arg4 = (char **) 0 ;
  uint32_t *arg5 = (uint32_t *) 0 ;
  tiledb_datatype_t *arg6 = (tiledb_datatype_t *) 0 ;
  uint32_t *arg7 = (uint32_t *) 0 ;
  void **arg8 = (void **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_group_t **)&jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg4 = *(char ***)&jarg4; 
  arg5 = *(uint32_t **)&jarg5; 
  arg6 = *(tiledb_datatype_t **)&jarg6; 
  arg7 = *(uint32_t **)&jarg7; 
  arg8 = *(void ***)&jarg8; 
  result = tiledb_group_get_metadata_from_index(arg1,arg2,arg3,(char const **)arg4,arg5,arg6,arg7,(void const **)arg8);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1group_1has_1metadata_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_group_t *arg2 = (tiledb_group_t *) 0 ;
  char *arg3 = (char *) 0 ;
  tiledb_datatype_t *arg4 = (tiledb_datatype_t *) 0 ;
  int32_t *arg5 = (int32_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_group_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(tiledb_datatype_t **)&jarg4; 
  arg5 = *(int32_t **)&jarg5; 
  result = tiledb_group_has_metadata_key(arg1,arg2,(char const *)arg3,arg4,arg5);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1group_1add_1member(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jshort jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_group_t *arg2 = (tiledb_group_t *) 0 ;
  char *arg3 = (char *) 0 ;
  uint8_t arg4 ;
  char *arg5 = (char *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_group_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (uint8_t)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = tiledb_group_add_member(arg1,arg2,(char const *)arg3,arg4,(char const *)arg5);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1group_1remove_1member(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_group_t *arg2 = (tiledb_group_t *) 0 ;
  char *arg3 = (char *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_group_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = tiledb_group_remove_member(arg1,arg2,(char const *)arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1group_1get_1member_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_group_t *arg2 = (tiledb_group_t *) 0 ;
  uint64_t *arg3 = (uint64_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_group_t **)&jarg2; 
  arg3 = *(uint64_t **)&jarg3; 
  result = tiledb_group_get_member_count(arg1,arg2,arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1group_1get_1member_1by_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_group_t *arg2 = (tiledb_group_t *) 0 ;
  uint64_t arg3 ;
  char **arg4 = (char **) 0 ;
  tiledb_object_t *arg5 = (tiledb_object_t *) 0 ;
  char **arg6 = (char **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_group_t **)&jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg4 = *(char ***)&jarg4; 
  arg5 = *(tiledb_object_t **)&jarg5; 
  arg6 = *(char ***)&jarg6; 
  result = tiledb_group_get_member_by_index(arg1,arg2,arg3,arg4,arg5,arg6);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1group_1get_1member_1by_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_group_t *arg2 = (tiledb_group_t *) 0 ;
  char *arg3 = (char *) 0 ;
  char **arg4 = (char **) 0 ;
  tiledb_object_t *arg5 = (tiledb_object_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_group_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(char ***)&jarg4; 
  arg5 = *(tiledb_object_t **)&jarg5; 
  result = tiledb_group_get_member_by_name(arg1,arg2,(char const *)arg3,arg4,arg5);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1group_1get_1is_1relative_1uri_1by_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_group_t *arg2 = (tiledb_group_t *) 0 ;
  char *arg3 = (char *) 0 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_group_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(uint8_t **)&jarg4; 
  result = tiledb_group_get_is_relative_uri_by_name(arg1,arg2,(char const *)arg3,arg4);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1group_1is_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_group_t *arg2 = (tiledb_group_t *) 0 ;
  int32_t *arg3 = (int32_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_group_t **)&jarg2; 
  arg3 = *(int32_t **)&jarg3; 
  result = tiledb_group_is_open(arg1,arg2,arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1group_1get_1uri(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_group_t *arg2 = (tiledb_group_t *) 0 ;
  char **arg3 = (char **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_group_t **)&jarg2; 
  arg3 = *(char ***)&jarg3; 
  result = tiledb_group_get_uri(arg1,arg2,(char const **)arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1group_1get_1query_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_group_t *arg2 = (tiledb_group_t *) 0 ;
  tiledb_query_type_t *arg3 = (tiledb_query_type_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_group_t **)&jarg2; 
  arg3 = *(tiledb_query_type_t **)&jarg3; 
  result = tiledb_group_get_query_type(arg1,arg2,arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1group_1dump_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jshort jarg4) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_group_t *arg2 = (tiledb_group_t *) 0 ;
  char **arg3 = (char **) 0 ;
  uint8_t arg4 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_group_t **)&jarg2; 
  arg3 = *(char ***)&jarg3; 
  arg4 = (uint8_t)jarg4; 
  result = tiledb_group_dump_str(arg1,arg2,arg3,arg4);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1group_1consolidate_1metadata(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_config_t *arg3 = (tiledb_config_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(tiledb_config_t **)&jarg3; 
  result = tiledb_group_consolidate_metadata(arg1,(char const *)arg2,arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1group_1vacuum_1metadata(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_config_t *arg3 = (tiledb_config_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(tiledb_config_t **)&jarg3; 
  result = tiledb_group_vacuum_metadata(arg1,(char const *)arg2,arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1dimension_1label_1free(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_dimension_label_t **arg1 = (tiledb_dimension_label_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_dimension_label_t ***)&jarg1; 
  tiledb_dimension_label_free(arg1);
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1dimension_1label_1get_1dimension_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_label_t *arg2 = (tiledb_dimension_label_t *) 0 ;
  uint32_t *arg3 = (uint32_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_dimension_label_t **)&jarg2; 
  arg3 = *(uint32_t **)&jarg3; 
  result = tiledb_dimension_label_get_dimension_index(arg1,arg2,arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1dimension_1label_1get_1label_1attr_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_label_t *arg2 = (tiledb_dimension_label_t *) 0 ;
  char **arg3 = (char **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_dimension_label_t **)&jarg2; 
  arg3 = *(char ***)&jarg3; 
  result = tiledb_dimension_label_get_label_attr_name(arg1,arg2,(char const **)arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1dimension_1label_1get_1label_1cell_1val_1num(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_label_t *arg2 = (tiledb_dimension_label_t *) 0 ;
  uint32_t *arg3 = (uint32_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_dimension_label_t **)&jarg2; 
  arg3 = *(uint32_t **)&jarg3; 
  result = tiledb_dimension_label_get_label_cell_val_num(arg1,arg2,arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1dimension_1label_1get_1label_1order(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_label_t *arg2 = (tiledb_dimension_label_t *) 0 ;
  tiledb_data_order_t *arg3 = (tiledb_data_order_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_dimension_label_t **)&jarg2; 
  arg3 = *(tiledb_data_order_t **)&jarg3; 
  result = tiledb_dimension_label_get_label_order(arg1,arg2,arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1dimension_1label_1get_1label_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_label_t *arg2 = (tiledb_dimension_label_t *) 0 ;
  tiledb_datatype_t *arg3 = (tiledb_datatype_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_dimension_label_t **)&jarg2; 
  arg3 = *(tiledb_datatype_t **)&jarg3; 
  result = tiledb_dimension_label_get_label_type(arg1,arg2,arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1dimension_1label_1get_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_label_t *arg2 = (tiledb_dimension_label_t *) 0 ;
  char **arg3 = (char **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_dimension_label_t **)&jarg2; 
  arg3 = *(char ***)&jarg3; 
  result = tiledb_dimension_label_get_name(arg1,arg2,(char const **)arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1dimension_1label_1get_1uri(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_label_t *arg2 = (tiledb_dimension_label_t *) 0 ;
  char **arg3 = (char **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_dimension_label_t **)&jarg2; 
  arg3 = *(char ***)&jarg3; 
  result = tiledb_dimension_label_get_uri(arg1,arg2,(char const **)arg3);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1add_1dimension_1label(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4, jint jarg5, jint jarg6) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  uint32_t arg3 ;
  char *arg4 = (char *) 0 ;
  tiledb_data_order_t arg5 ;
  tiledb_datatype_t arg6 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (tiledb_data_order_t)jarg5; 
  arg6 = (tiledb_datatype_t)jarg6; 
  result = tiledb_array_schema_add_dimension_label(arg1,arg2,arg3,(char const *)arg4,arg5,arg6);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1get_1dimension_1label_1from_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  char *arg3 = (char *) 0 ;
  tiledb_dimension_label_t **arg4 = (tiledb_dimension_label_t **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(tiledb_dimension_label_t ***)&jarg4; 
  result = tiledb_array_schema_get_dimension_label_from_name(arg1,arg2,(char const *)arg3,arg4);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1has_1dimension_1label(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int32_t *arg4 = (int32_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(int32_t **)&jarg4; 
  result = tiledb_array_schema_has_dimension_label(arg1,(tiledb_array_schema_t const *)arg2,(char const *)arg3,arg4);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1set_1dimension_1label_1filter_1list(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  char *arg3 = (char *) 0 ;
  tiledb_filter_list_t *arg4 = (tiledb_filter_list_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(tiledb_filter_list_t **)&jarg4; 
  result = tiledb_array_schema_set_dimension_label_filter_list(arg1,arg2,(char const *)arg3,arg4);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1set_1dimension_1label_1tile_1extent(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jint jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  char *arg3 = (char *) 0 ;
  tiledb_datatype_t arg4 ;
  void *arg5 = (void *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (tiledb_datatype_t)jarg4; 
  arg5 = *(void **)&jarg5; 
  result = tiledb_array_schema_set_dimension_label_tile_extent(arg1,arg2,(char const *)arg3,arg4,(void const *)arg5);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1subarray_1add_1label_1range(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_subarray_t *arg2 = (tiledb_subarray_t *) 0 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_subarray_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(void **)&jarg4; 
  arg5 = *(void **)&jarg5; 
  arg6 = *(void **)&jarg6; 
  result = tiledb_subarray_add_label_range(arg1,arg2,(char const *)arg3,(void const *)arg4,(void const *)arg5,(void const *)arg6);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1subarray_1add_1label_1range_1var(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jobject jarg5, jlong jarg6, jobject jarg7) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_subarray_t *arg2 = (tiledb_subarray_t *) 0 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = (void *) 0 ;
  uint64_t arg5 ;
  void *arg6 = (void *) 0 ;
  uint64_t arg7 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_subarray_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(void **)&jarg4; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg5);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg5, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg5 = 0;
    if (sz > 0) {
      arg5 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg5 = (arg5 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg6 = *(void **)&jarg6; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg7) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg7);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg7, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg7 = 0;
    if (sz > 0) {
      arg7 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg7 = (arg7 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = tiledb_subarray_add_label_range_var(arg1,arg2,(char const *)arg3,(void const *)arg4,arg5,(void const *)arg6,arg7);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1subarray_1get_1label_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_subarray_t *arg2 = (tiledb_subarray_t *) 0 ;
  uint32_t arg3 ;
  char **arg4 = (char **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_subarray_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(char ***)&jarg4; 
  result = tiledb_subarray_get_label_name(arg1,arg2,arg3,(char const **)arg4);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1subarray_1get_1label_1range(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jobject jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_subarray_t *arg2 = (tiledb_subarray_t *) 0 ;
  char *arg3 = (char *) 0 ;
  uint64_t arg4 ;
  void **arg5 = (void **) 0 ;
  void **arg6 = (void **) 0 ;
  void **arg7 = (void **) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_subarray_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = *(void ***)&jarg5; 
  arg6 = *(void ***)&jarg6; 
  arg7 = *(void ***)&jarg7; 
  result = tiledb_subarray_get_label_range(arg1,(tiledb_subarray_t const *)arg2,(char const *)arg3,arg4,(void const **)arg5,(void const **)arg6,(void const **)arg7);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1subarray_1get_1label_1range_1num(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_subarray_t *arg2 = (tiledb_subarray_t *) 0 ;
  char *arg3 = (char *) 0 ;
  uint64_t *arg4 = (uint64_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_subarray_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(uint64_t **)&jarg4; 
  result = tiledb_subarray_get_label_range_num(arg1,(tiledb_subarray_t const *)arg2,(char const *)arg3,arg4);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1subarray_1get_1label_1range_1var(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jobject jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_subarray_t *arg2 = (tiledb_subarray_t *) 0 ;
  char *arg3 = (char *) 0 ;
  uint64_t arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_subarray_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = *(void **)&jarg5; 
  arg6 = *(void **)&jarg6; 
  result = tiledb_subarray_get_label_range_var(arg1,(tiledb_subarray_t const *)arg2,(char const *)arg3,arg4,arg5,arg6);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1subarray_1get_1label_1range_1var_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jobject jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_subarray_t *arg2 = (tiledb_subarray_t *) 0 ;
  char *arg3 = (char *) 0 ;
  uint64_t arg4 ;
  uint64_t *arg5 = (uint64_t *) 0 ;
  uint64_t *arg6 = (uint64_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_subarray_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = *(uint64_t **)&jarg5; 
  arg6 = *(uint64_t **)&jarg6; 
  result = tiledb_subarray_get_label_range_var_size(arg1,(tiledb_subarray_t const *)arg2,(char const *)arg3,arg4,arg5,arg6);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1subarray_1has_1label_1ranges(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_subarray_t *arg2 = (tiledb_subarray_t *) 0 ;
  uint32_t arg3 ;
  int32_t *arg4 = (int32_t *) 0 ;
  SwigValueWrapper< capi_return_t > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_subarray_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(int32_t **)&jarg4; 
  result = tiledb_subarray_has_label_ranges(arg1,(tiledb_subarray_t const *)arg2,arg3,arg4);
  *(capi_return_t **)&jresult = new capi_return_t((const capi_return_t &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1evolution_1alloc(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_evolution_t **arg2 = (tiledb_array_schema_evolution_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_evolution_t ***)&jarg2; 
  result = (int32_t)tiledb_array_schema_evolution_alloc(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1evolution_1free(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_array_schema_evolution_t **arg1 = (tiledb_array_schema_evolution_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_array_schema_evolution_t ***)&jarg1; 
  tiledb_array_schema_evolution_free(arg1);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1evolution_1add_1attribute(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_evolution_t *arg2 = (tiledb_array_schema_evolution_t *) 0 ;
  tiledb_attribute_t *arg3 = (tiledb_attribute_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_evolution_t **)&jarg2; 
  arg3 = *(tiledb_attribute_t **)&jarg3; 
  result = (int32_t)tiledb_array_schema_evolution_add_attribute(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1evolution_1drop_1attribute(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_evolution_t *arg2 = (tiledb_array_schema_evolution_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_evolution_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int32_t)tiledb_array_schema_evolution_drop_attribute(arg1,arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1evolution_1set_1timestamp_1range(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg3, jobject jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_evolution_t *arg2 = (tiledb_array_schema_evolution_t *) 0 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_evolution_t **)&jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (int32_t)tiledb_array_schema_evolution_set_timestamp_range(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1timestamp_1range(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  uint64_t *arg3 = (uint64_t *) 0 ;
  uint64_t *arg4 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = *(uint64_t **)&jarg3; 
  arg4 = *(uint64_t **)&jarg4; 
  result = (int32_t)tiledb_array_schema_timestamp_range(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1delete(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int32_t)tiledb_array_delete(arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1delete_1array(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_t *arg2 = (tiledb_array_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int32_t)tiledb_array_delete_array(arg1,arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1evolve(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_array_schema_evolution_t *arg3 = (tiledb_array_schema_evolution_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(tiledb_array_schema_evolution_t **)&jarg3; 
  result = (int32_t)tiledb_array_evolve(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1upgrade_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_config_t *arg3 = (tiledb_config_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(tiledb_config_t **)&jarg3; 
  result = (int32_t)tiledb_array_upgrade_version(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1add_1update_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jobject jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = (void *) 0 ;
  uint64_t arg5 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(void **)&jarg4; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg5);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg5, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg5 = 0;
    if (sz > 0) {
      arg5 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg5 = (arg5 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (int32_t)tiledb_query_add_update_value(arg1,arg2,(char const *)arg3,(void const *)arg4,arg5);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1subarray_1add_1point_1ranges(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_subarray_t *arg2 = (tiledb_subarray_t *) 0 ;
  uint32_t arg3 ;
  void *arg4 = (void *) 0 ;
  uint64_t arg5 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_subarray_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(void **)&jarg4; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg5);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg5, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg5 = 0;
    if (sz > 0) {
      arg5 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg5 = (arg5 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (int32_t)tiledb_subarray_add_point_ranges(arg1,arg2,arg3,(void const *)arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1add_1point_1ranges(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  uint32_t arg3 ;
  void *arg4 = (void *) 0 ;
  uint64_t arg5 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(void **)&jarg4; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg5);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg5, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg5 = 0;
    if (sz > 0) {
      arg5 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg5 = (arg5 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (int32_t)tiledb_query_add_point_ranges(arg1,arg2,arg3,(void const *)arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1get_1relevant_1fragment_1num(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  uint64_t *arg3 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = *(uint64_t **)&jarg3; 
  result = (int32_t)tiledb_query_get_relevant_fragment_num(arg1,(tiledb_query_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1status_1details_1t_1incomplete_1reason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  tiledb_experimental_query_status_details_t *arg1 = (tiledb_experimental_query_status_details_t *) 0 ;
  tiledb_query_status_details_reason_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_experimental_query_status_details_t **)&jarg1; 
  arg2 = (tiledb_query_status_details_reason_t)jarg2; 
  if (arg1) (arg1)->incomplete_reason = arg2;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1status_1details_1t_1incomplete_1reason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  tiledb_experimental_query_status_details_t *arg1 = (tiledb_experimental_query_status_details_t *) 0 ;
  tiledb_query_status_details_reason_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tiledb_experimental_query_status_details_t **)&jarg1; 
  result = (tiledb_query_status_details_reason_t) ((arg1)->incomplete_reason);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_new_1tiledb_1query_1status_1details_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tiledb_experimental_query_status_details_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tiledb_experimental_query_status_details_t *)new tiledb_experimental_query_status_details_t();
  *(tiledb_experimental_query_status_details_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_delete_1tiledb_1query_1status_1details_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_experimental_query_status_details_t *arg1 = (tiledb_experimental_query_status_details_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_experimental_query_status_details_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1get_1status_1details(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  tiledb_query_status_details_t *arg3 = (tiledb_query_status_details_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = *(tiledb_query_status_details_t **)&jarg3; 
  result = (int32_t)tiledb_query_get_status_details(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}

SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1consolidate_1fragments(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jobject jarg4, jlong jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  uint64_t arg4 ;
  tiledb_config_t *arg5 = (tiledb_config_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(char ***)&jarg3; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (uint64_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (uint64_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = *(tiledb_config_t **)&jarg5; 
  result = (int32_t)tiledb_array_consolidate_fragments(arg1,(char const *)arg2,(char const **)arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1filestore_1schema_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_array_schema_t **arg3 = (tiledb_array_schema_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(tiledb_array_schema_t ***)&jarg3; 
  result = (int32_t)tiledb_filestore_schema_create(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1filestore_1uri_1import(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jint jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  tiledb_mime_type_t arg4 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (tiledb_mime_type_t)jarg4; 
  result = (int32_t)tiledb_filestore_uri_import(arg1,(char const *)arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1filestore_1uri_1export(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int32_t)tiledb_filestore_uri_export(arg1,(char const *)arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1filestore_1buffer_1import(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jlong jarg4, jint jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = (void *) 0 ;
  size_t arg4 ;
  tiledb_mime_type_t arg5 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(void **)&jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (tiledb_mime_type_t)jarg5; 
  result = (int32_t)tiledb_filestore_buffer_import(arg1,(char const *)arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1filestore_1buffer_1export(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *arg4 = (void *) 0 ;
  size_t arg5 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  arg4 = *(void **)&jarg4; 
  arg5 = (size_t)jarg5; 
  result = (int32_t)tiledb_filestore_buffer_export(arg1,(char const *)arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1filestore_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t *arg3 = (size_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(size_t **)&jarg3; 
  result = (int32_t)tiledb_filestore_size(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1mime_1type_1to_1str(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jint jresult = 0 ;
  tiledb_mime_type_t arg1 ;
  char **arg2 = (char **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (tiledb_mime_type_t)jarg1; 
  arg2 = *(char ***)&jarg2; 
  result = (int32_t)tiledb_mime_type_to_str(arg1,(char const **)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1mime_1type_1from_1str(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  tiledb_mime_type_t *arg2 = (tiledb_mime_type_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(tiledb_mime_type_t **)&jarg2; 
  result = (int32_t)tiledb_mime_type_from_str((char const *)arg1,arg2);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1get_1total_1cell_1num(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  uint64_t *arg3 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  arg3 = *(uint64_t **)&jarg3; 
  result = (int32_t)tiledb_fragment_info_get_total_cell_num(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1consolidation_1plan_1create_1with_1mbr(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_t *arg2 = (tiledb_array_t *) 0 ;
  uint64_t arg3 ;
  tiledb_consolidation_plan_t **arg4 = (tiledb_consolidation_plan_t **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_t **)&jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg4 = *(tiledb_consolidation_plan_t ***)&jarg4; 
  result = (int32_t)tiledb_consolidation_plan_create_with_mbr(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1consolidation_1plan_1free(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tiledb_consolidation_plan_t **arg1 = (tiledb_consolidation_plan_t **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_consolidation_plan_t ***)&jarg1; 
  tiledb_consolidation_plan_free(arg1);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1consolidation_1plan_1get_1num_1nodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_consolidation_plan_t *arg2 = (tiledb_consolidation_plan_t *) 0 ;
  uint64_t *arg3 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_consolidation_plan_t **)&jarg2; 
  arg3 = *(uint64_t **)&jarg3; 
  result = (int32_t)tiledb_consolidation_plan_get_num_nodes(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1consolidation_1plan_1get_1num_1fragments(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg3, jlong jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_consolidation_plan_t *arg2 = (tiledb_consolidation_plan_t *) 0 ;
  uint64_t arg3 ;
  uint64_t *arg4 = (uint64_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_consolidation_plan_t **)&jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg4 = *(uint64_t **)&jarg4; 
  result = (int32_t)tiledb_consolidation_plan_get_num_fragments(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1consolidation_1plan_1get_1fragment_1uri(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg3, jobject jarg4, jlong jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_consolidation_plan_t *arg2 = (tiledb_consolidation_plan_t *) 0 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  char **arg5 = (char **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_consolidation_plan_t **)&jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = *(char ***)&jarg5; 
  result = (int32_t)tiledb_consolidation_plan_get_fragment_uri(arg1,arg2,arg3,arg4,(char const **)arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1consolidation_1plan_1dump_1json_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_consolidation_plan_t *arg2 = (tiledb_consolidation_plan_t *) 0 ;
  char **arg3 = (char **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_consolidation_plan_t **)&jarg2; 
  arg3 = *(char ***)&jarg3; 
  result = (int32_t)tiledb_consolidation_plan_dump_json_str(arg1,(tiledb_consolidation_plan_t const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1consolidation_1plan_1free_1json_1str(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  char **arg1 = (char **) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char ***)&jarg1; 
  result = (int32_t)tiledb_consolidation_plan_free_json_str(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1dimension_1dump_1stdout(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_t *arg2 = (tiledb_dimension_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_dimension_t **)&jarg2; 
  result = (int)tiledb_dimension_dump_stdout(arg1,(tiledb_dimension_t const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1attribute_1dump_1stdout(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  result = (int)tiledb_attribute_dump_stdout(arg1,(tiledb_attribute_t const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1domain_1dump_1stdout(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_domain_t *arg2 = (tiledb_domain_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_domain_t **)&jarg2; 
  result = (int)tiledb_domain_dump_stdout(arg1,(tiledb_domain_t const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1dump_1stdout(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  result = (int)tiledb_array_schema_dump_stdout(arg1,(tiledb_array_schema_t const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1stats_1dump_1stdout(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)tiledb_stats_dump_stdout();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1fragment_1info_1dump_1stdout(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_fragment_info_t *arg2 = (tiledb_fragment_info_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_fragment_info_t **)&jarg2; 
  result = (int)tiledb_fragment_info_dump_stdout(arg1,(tiledb_fragment_info_t const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1dimension_1dump_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_dimension_t *arg2 = (tiledb_dimension_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_dimension_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)tiledb_dimension_dump_file(arg1,(tiledb_dimension_t const *)arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1attribute_1dump_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_attribute_t *arg2 = (tiledb_attribute_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_attribute_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)tiledb_attribute_dump_file(arg1,(tiledb_attribute_t const *)arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1domain_1dump_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_domain_t *arg2 = (tiledb_domain_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_domain_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)tiledb_domain_dump_file(arg1,(tiledb_domain_t const *)arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1array_1schema_1dump_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_array_schema_t *arg2 = (tiledb_array_schema_t *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_array_schema_t **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)tiledb_array_schema_dump_file(arg1,(tiledb_array_schema_t const *)arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1stats_1dump_1file(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (int)tiledb_stats_dump_file((char const *)arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_derefVoid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void **arg1 = (void **) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void ***)&jarg1; 
  result = (void *)derefVoid(arg1);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_tiledb_libtiledb_tiledbJNI_print_1upon_1completion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  void *arg1 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  print_upon_completion(arg1);
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_print_1path(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  tiledb_object_t arg2 ;
  void *arg3 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (tiledb_object_t)jarg2; 
  arg3 = *(void **)&jarg3; 
  result = (int)print_path((char const *)arg1,arg2,arg3);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_native_1callback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  void (*result)(void *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (void (*)(void *))native_callback();
  *(void (**)(void *))&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_tiledb_libtiledb_tiledbJNI_native_1walk_1callback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int (*result)(char const *,tiledb_object_t,void *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int (*)(char const *,tiledb_object_t,void *))native_walk_callback();
  *(int (**)(char const *,tiledb_object_t,void *))&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1query_1submit_1async_1jc(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg4) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  tiledb_query_t *arg2 = (tiledb_query_t *) 0 ;
  void (*arg3)(void *) = (void (*)(void *)) 0 ;
  jobject arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = *(tiledb_query_t **)&jarg2; 
  arg3 = *(void (**)(void *))&jarg3; 
  arg4 = jarg4; 
  result = (int)tiledb_query_submit_async_jc(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_tiledb_libtiledb_tiledbJNI_tiledb_1object_1walk_1jc(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  tiledb_ctx_t *arg1 = (tiledb_ctx_t *) 0 ;
  char *arg2 = (char *) 0 ;
  tiledb_walk_order_t arg3 ;
  int (*arg4)(char const *,tiledb_object_t,void *) = (int (*)(char const *,tiledb_object_t,void *)) 0 ;
  void *arg5 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tiledb_ctx_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (tiledb_walk_order_t)jarg3; 
  arg4 = *(int (**)(char const *,tiledb_object_t,void *))&jarg4; 
  arg5 = *(void **)&jarg5; 
  result = (int)tiledb_object_walk_jc(arg1,(char const *)arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


#ifdef __cplusplus
}
#endif

