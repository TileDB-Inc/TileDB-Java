/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.tiledb.libtiledb;

public class _opaque_pthread_t {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected _opaque_pthread_t(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(_opaque_pthread_t obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        tiledbJNI.delete__opaque_pthread_t(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void set__sig(int value) {
    tiledbJNI._opaque_pthread_t___sig_set(swigCPtr, this, value);
  }

  public int get__sig() {
    return tiledbJNI._opaque_pthread_t___sig_get(swigCPtr, this);
  }

  public void set__cleanup_stack(__darwin_pthread_handler_rec value) {
    tiledbJNI._opaque_pthread_t___cleanup_stack_set(
        swigCPtr, this, __darwin_pthread_handler_rec.getCPtr(value), value);
  }

  public __darwin_pthread_handler_rec get__cleanup_stack() {
    long cPtr = tiledbJNI._opaque_pthread_t___cleanup_stack_get(swigCPtr, this);
    return (cPtr == 0) ? null : new __darwin_pthread_handler_rec(cPtr, false);
  }

  public void set__opaque(String value) {
    tiledbJNI._opaque_pthread_t___opaque_set(swigCPtr, this, value);
  }

  public String get__opaque() {
    return tiledbJNI._opaque_pthread_t___opaque_get(swigCPtr, this);
  }

  public _opaque_pthread_t() {
    this(tiledbJNI.new__opaque_pthread_t(), true);
  }
}
