/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.tiledb.libtiledb;

public class __darwin_pthread_handler_rec {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected __darwin_pthread_handler_rec(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(__darwin_pthread_handler_rec obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        tiledbJNI.delete___darwin_pthread_handler_rec(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void set__routine(SWIGTYPE_p_f_p_void__void value) {
    tiledbJNI.__darwin_pthread_handler_rec___routine_set(
        swigCPtr, this, SWIGTYPE_p_f_p_void__void.getCPtr(value));
  }

  public SWIGTYPE_p_f_p_void__void get__routine() {
    long cPtr = tiledbJNI.__darwin_pthread_handler_rec___routine_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_f_p_void__void(cPtr, false);
  }

  public void set__arg(SWIGTYPE_p_void value) {
    tiledbJNI.__darwin_pthread_handler_rec___arg_set(
        swigCPtr, this, SWIGTYPE_p_void.getCPtr(value));
  }

  public SWIGTYPE_p_void get__arg() {
    long cPtr = tiledbJNI.__darwin_pthread_handler_rec___arg_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public void set__next(__darwin_pthread_handler_rec value) {
    tiledbJNI.__darwin_pthread_handler_rec___next_set(
        swigCPtr, this, __darwin_pthread_handler_rec.getCPtr(value), value);
  }

  public __darwin_pthread_handler_rec get__next() {
    long cPtr = tiledbJNI.__darwin_pthread_handler_rec___next_get(swigCPtr, this);
    return (cPtr == 0) ? null : new __darwin_pthread_handler_rec(cPtr, false);
  }

  public __darwin_pthread_handler_rec() {
    this(tiledbJNI.new___darwin_pthread_handler_rec(), true);
  }
}
